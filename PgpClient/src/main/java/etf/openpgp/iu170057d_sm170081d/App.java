/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package etf.openpgp.iu170057d_sm170081d;

import java.io.File;
import java.util.Iterator;

import etf.openpgp.iu170057d_sm170081d.utils.Utils;
import etf.openpgp.iu170057d_sm170081d.encryption.Encryption;
import etf.openpgp.iu170057d_sm170081d.encryption.PGPKeys;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import org.bouncycastle.openpgp.PGPException;
import org.bouncycastle.util.encoders.Hex;
import org.bouncycastle.openpgp.PGPKeyRingGenerator;
import org.bouncycastle.openpgp.PGPPublicKeyRing;
import org.bouncycastle.openpgp.PGPPublicKeyRingCollection;
import org.bouncycastle.openpgp.PGPSecretKeyRing;
import org.bouncycastle.openpgp.PGPSecretKeyRingCollection;
import org.bouncycastle.openpgp.PGPPublicKey;
import org.bouncycastle.openpgp.PGPPrivateKey;
import org.bouncycastle.openpgp.PGPSecretKey;
import org.bouncycastle.openpgp.operator.jcajce.JcePBESecretKeyDecryptorBuilder;

/**
 *
 * @author Marko
 */
public class App extends javax.swing.JFrame {

    private String currentMessage = null;
    
    /**
     * Creates new form App
     */
    public App() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jTabs = new javax.swing.JTabbedPane();
        jSend_Tab = new javax.swing.JPanel();
        jSend_FromLabel = new javax.swing.JLabel();
        jSend_ToLabel = new javax.swing.JLabel();
        jSend_FromDropdown = new javax.swing.JComboBox<>();
        jSend_ToDropdown = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jSend_BodyTextarea = new javax.swing.JTextArea();
        jSend_SendButton = new javax.swing.JButton();
        jSend_SignatureLabel = new javax.swing.JLabel();
        jSend_SignatureTextbox = new javax.swing.JTextField();
        jSend_EncryptionLabel = new javax.swing.JLabel();
        jSend_EncryptionDropdown = new javax.swing.JComboBox<>();
        jSend_PassphraseLabel = new javax.swing.JLabel();
        jSend_CompressedCheckbox = new javax.swing.JCheckBox();
        jSend_EncodedCheckbox = new javax.swing.JCheckBox();
        jSend_TestButton = new javax.swing.JButton();
        jSend_PassphrasePasswordbox = new javax.swing.JPasswordField();
        jRecv_Tab = new javax.swing.JPanel();
        jRecv_FromLabel = new javax.swing.JLabel();
        jRecv_ToLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jRecv_BodyTextarea = new javax.swing.JTextArea();
        jRecv_OpenButton = new javax.swing.JButton();
        jRecv_SignatureLabel = new javax.swing.JLabel();
        jRecv_SignatureTextbox = new javax.swing.JTextField();
        jRecv_EncryptionLabel = new javax.swing.JLabel();
        jRecv_PassphraseLabel = new javax.swing.JLabel();
        jRecv_CompressedCheckbox = new javax.swing.JCheckBox();
        jRecv_EncodedCheckbox = new javax.swing.JCheckBox();
        jRecv_DecryptButton = new javax.swing.JButton();
        jRecv_EncryptionTextbox = new javax.swing.JTextField();
        jRecv_SaveButton = new javax.swing.JButton();
        jRecv_FromTextbox = new javax.swing.JTextField();
        jRecv_ToTextbox = new javax.swing.JTextField();
        jRecv_PassphrasePasswordbox = new javax.swing.JPasswordField();
        randomjavaname = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jPublicKeyRings_Table = new javax.swing.JTable();
        jDeletePublicKey_Button = new javax.swing.JButton();
        jImportPublicKey_Button = new javax.swing.JButton();
        jExportPublicKey_Button = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jPrivateKeyRings_Table = new javax.swing.JTable();
        jPrivateKeyGenerate_Button = new javax.swing.JButton();
        jPrivateKeyImport_Button = new javax.swing.JButton();
        jPrivateKeyExport_Button = new javax.swing.JButton();
        jPrivateKeyName_TextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jPrivateKeyPassphrase_TextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jPrivateKeyEmail_TextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jPrivateKeyDelete_Button = new javax.swing.JButton();
        jPrivateKeyDSABits_ComboBox = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jStatusbar = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Pretty Good Privacy Client");
        setSize(new java.awt.Dimension(640, 480));

        jTabs.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        jTabs.setDoubleBuffered(true);
        jTabs.setPreferredSize(new java.awt.Dimension(640, 480));

        jSend_Tab.setBorder(javax.swing.BorderFactory.createEmptyBorder(25, 30, 25, 30));

        jSend_FromLabel.setText("From");

        jSend_ToLabel.setText("To");

        jSend_FromDropdown.setMaximumRowCount(16);
        jSend_FromDropdown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "pera@gmail.com       |   AAAA AAAA BBBB BBBB", "pera@gmail.com       |   AB01 5912 7EFF 0DFD", "pera@gmail.com       |   za slanje zikinoj firmi", "pera@gmail.com       |   <no signature>", "pera@hotmail.com    |   ABCD EF012 3456 789A", "pera@hotmail.com    |   <no signature>", " " }));

        jSend_ToDropdown.setMaximumRowCount(16);
        jSend_ToDropdown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "zika@gmail.com       |   FF01 FFFF FFFF BBBB", "zika@gmail.com       |   zikin glavni javni kljuc", "zika@hotmail.com    |   ABCD EF012 3456 789A", "" }));

        jSend_BodyTextarea.setColumns(20);
        jSend_BodyTextarea.setLineWrap(true);
        jSend_BodyTextarea.setTabSize(4);
        jSend_BodyTextarea.setName(""); // NOI18N
        jScrollPane1.setViewportView(jSend_BodyTextarea);

        jSend_SendButton.setText("Send");
        jSend_SendButton.setPreferredSize(new java.awt.Dimension(58, 32));
        jSend_SendButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSend_SendButtonMouseClicked(evt);
            }
        });

        jSend_SignatureLabel.setText("Signature");

        jSend_SignatureTextbox.setEditable(false);
        jSend_SignatureTextbox.setText("DSA 4096");

        jSend_EncryptionLabel.setText("Encryption");

        jSend_EncryptionDropdown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ElGamal + IDEA", "ElGamal + 3DES", "none" }));

        jSend_PassphraseLabel.setText("Passphrase");

        jSend_CompressedCheckbox.setSelected(true);
        jSend_CompressedCheckbox.setText("Compressed ");
        jSend_CompressedCheckbox.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        jSend_EncodedCheckbox.setSelected(true);
        jSend_EncodedCheckbox.setText("Encoded ");
        jSend_EncodedCheckbox.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        jSend_TestButton.setText("Test");

        jSend_PassphrasePasswordbox.setText("passphrase");

        javax.swing.GroupLayout jSend_TabLayout = new javax.swing.GroupLayout(jSend_Tab);
        jSend_Tab.setLayout(jSend_TabLayout);
        jSend_TabLayout.setHorizontalGroup(
            jSend_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jSend_TabLayout.createSequentialGroup()
                .addGroup(jSend_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jSend_FromLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSend_ToLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jSend_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSend_FromDropdown, 0, 677, Short.MAX_VALUE)
                    .addComponent(jSend_ToDropdown, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSend_SendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jSend_TabLayout.createSequentialGroup()
                .addGroup(jSend_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jSend_EncryptionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSend_SignatureLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jSend_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jSend_EncryptionDropdown, 0, 194, Short.MAX_VALUE)
                    .addComponent(jSend_SignatureTextbox, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jSend_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jSend_TabLayout.createSequentialGroup()
                        .addComponent(jSend_CompressedCheckbox)
                        .addGap(18, 18, 18)
                        .addComponent(jSend_EncodedCheckbox)
                        .addContainerGap())
                    .addGroup(jSend_TabLayout.createSequentialGroup()
                        .addComponent(jSend_PassphraseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSend_PassphrasePasswordbox, javax.swing.GroupLayout.DEFAULT_SIZE, 369, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSend_TestButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        jSend_TabLayout.setVerticalGroup(
            jSend_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jSend_TabLayout.createSequentialGroup()
                .addGroup(jSend_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jSend_TabLayout.createSequentialGroup()
                        .addGroup(jSend_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSend_FromLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSend_FromDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jSend_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jSend_ToDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSend_ToLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jSend_SendButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 311, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jSend_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jSend_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jSend_TestButton)
                        .addComponent(jSend_PassphraseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jSend_PassphrasePasswordbox, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSend_SignatureLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSend_SignatureTextbox, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jSend_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSend_EncryptionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSend_EncryptionDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSend_CompressedCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSend_EncodedCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jTabs.addTab("Send email", jSend_Tab);

        jRecv_Tab.setBorder(javax.swing.BorderFactory.createEmptyBorder(25, 30, 25, 30));

        jRecv_FromLabel.setText("From");

        jRecv_ToLabel.setText("To");

        jRecv_BodyTextarea.setEditable(false);
        jRecv_BodyTextarea.setColumns(20);
        jRecv_BodyTextarea.setTabSize(4);
        jScrollPane2.setViewportView(jRecv_BodyTextarea);

        jRecv_OpenButton.setText("Open");
        jRecv_OpenButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jRecv_OpenButtonMouseClicked(evt);
            }
        });

        jRecv_SignatureLabel.setText("Signature");

        jRecv_SignatureTextbox.setEditable(false);

        jRecv_EncryptionLabel.setText("Encryption");

        jRecv_PassphraseLabel.setText("Passphrase");

        jRecv_CompressedCheckbox.setSelected(true);
        jRecv_CompressedCheckbox.setText("Compressed ");
        jRecv_CompressedCheckbox.setEnabled(false);
        jRecv_CompressedCheckbox.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        jRecv_EncodedCheckbox.setSelected(true);
        jRecv_EncodedCheckbox.setText("Encoded ");
        jRecv_EncodedCheckbox.setEnabled(false);
        jRecv_EncodedCheckbox.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        jRecv_DecryptButton.setText("Decr.");

        jRecv_EncryptionTextbox.setEditable(false);

        jRecv_SaveButton.setText("Save");
        jRecv_SaveButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jRecv_SaveButtonMouseClicked(evt);
            }
        });

        jRecv_FromTextbox.setEditable(false);

        jRecv_ToTextbox.setEditable(false);

        jRecv_PassphrasePasswordbox.setText("passphrase");

        javax.swing.GroupLayout jRecv_TabLayout = new javax.swing.GroupLayout(jRecv_Tab);
        jRecv_Tab.setLayout(jRecv_TabLayout);
        jRecv_TabLayout.setHorizontalGroup(
            jRecv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jRecv_TabLayout.createSequentialGroup()
                .addGroup(jRecv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jRecv_FromLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRecv_ToLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jRecv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRecv_FromTextbox)
                    .addComponent(jRecv_ToTextbox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jRecv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jRecv_SaveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRecv_OpenButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGroup(jRecv_TabLayout.createSequentialGroup()
                .addGroup(jRecv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jRecv_EncryptionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRecv_SignatureLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jRecv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jRecv_SignatureTextbox, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
                    .addComponent(jRecv_EncryptionTextbox, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jRecv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jRecv_TabLayout.createSequentialGroup()
                        .addComponent(jRecv_CompressedCheckbox)
                        .addGap(18, 18, 18)
                        .addComponent(jRecv_EncodedCheckbox)
                        .addGap(31, 31, 31))
                    .addGroup(jRecv_TabLayout.createSequentialGroup()
                        .addComponent(jRecv_PassphraseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRecv_PassphrasePasswordbox, javax.swing.GroupLayout.DEFAULT_SIZE, 369, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRecv_DecryptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jRecv_TabLayout.setVerticalGroup(
            jRecv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jRecv_TabLayout.createSequentialGroup()
                .addGroup(jRecv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRecv_FromLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRecv_FromTextbox, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRecv_OpenButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(11, 11, 11)
                .addGroup(jRecv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRecv_ToTextbox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jRecv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jRecv_ToLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jRecv_SaveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jRecv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jRecv_SignatureLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jRecv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jRecv_SignatureTextbox, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jRecv_CompressedCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jRecv_EncodedCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jRecv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jRecv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jRecv_DecryptButton)
                        .addComponent(jRecv_PassphraseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jRecv_PassphrasePasswordbox, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jRecv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jRecv_EncryptionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jRecv_EncryptionTextbox, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        jTabs.addTab("Receive email", jRecv_Tab);

        jPublicKeyRings_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Email", "Key Id", "PublicKeyValue"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(jPublicKeyRings_Table);
        if (jPublicKeyRings_Table.getColumnModel().getColumnCount() > 0) {
            jPublicKeyRings_Table.getColumnModel().getColumn(2).setMinWidth(0);
            jPublicKeyRings_Table.getColumnModel().getColumn(2).setPreferredWidth(0);
            jPublicKeyRings_Table.getColumnModel().getColumn(2).setMaxWidth(0);
        }

        jDeletePublicKey_Button.setText("Delete");
        jDeletePublicKey_Button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jDeletePublicKey_ButtonMouseClicked(evt);
            }
        });
        jDeletePublicKey_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDeletePublicKey_ButtonActionPerformed(evt);
            }
        });

        jImportPublicKey_Button.setText("Import");
        jImportPublicKey_Button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jImportPublicKey_ButtonMouseClicked(evt);
            }
        });
        jImportPublicKey_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jImportPublicKey_ButtonActionPerformed(evt);
            }
        });

        jExportPublicKey_Button.setText("Export");
        jExportPublicKey_Button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jExportPublicKey_ButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout randomjavanameLayout = new javax.swing.GroupLayout(randomjavaname);
        randomjavaname.setLayout(randomjavanameLayout);
        randomjavanameLayout.setHorizontalGroup(
            randomjavanameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(randomjavanameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(randomjavanameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 752, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(randomjavanameLayout.createSequentialGroup()
                        .addComponent(jDeletePublicKey_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(86, 86, 86)
                        .addComponent(jImportPublicKey_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(92, 92, 92)
                        .addComponent(jExportPublicKey_Button)))
                .addContainerGap(99, Short.MAX_VALUE))
        );
        randomjavanameLayout.setVerticalGroup(
            randomjavanameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(randomjavanameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addGroup(randomjavanameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jDeletePublicKey_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jImportPublicKey_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jExportPublicKey_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(235, Short.MAX_VALUE))
        );

        jTabs.addTab("Public Keys", randomjavaname);

        jPrivateKeyRings_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Email", "Key Id", "PrivateKeyId"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(jPrivateKeyRings_Table);
        if (jPrivateKeyRings_Table.getColumnModel().getColumnCount() > 0) {
            jPrivateKeyRings_Table.getColumnModel().getColumn(3).setMinWidth(0);
            jPrivateKeyRings_Table.getColumnModel().getColumn(3).setPreferredWidth(0);
            jPrivateKeyRings_Table.getColumnModel().getColumn(3).setMaxWidth(0);
        }

        jPrivateKeyGenerate_Button.setText("Generate");

        jPrivateKeyImport_Button.setText("Import");

        jPrivateKeyExport_Button.setText("Export");

        jLabel1.setText("Name");

        jLabel2.setText("Passphrase");

        jLabel3.setText("Email");

        jPrivateKeyDelete_Button.setText("Delete");

        jPrivateKeyDSABits_ComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1024", "2048" }));
        jPrivateKeyDSABits_ComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPrivateKeyDSABits_ComboBoxActionPerformed(evt);
            }
        });

        jLabel4.setText("DSA bits");

        jLabel5.setText("ElGamal bits");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1024", "2048", "4096" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPrivateKeyImport_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPrivateKeyExport_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPrivateKeyName_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(134, 134, 134)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPrivateKeyEmail_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(242, 242, 242)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPrivateKeyPassphrase_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPrivateKeyGenerate_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPrivateKeyDelete_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(217, 217, 217)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jPrivateKeyDSABits_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(74, 74, 74)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 752, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(60, 60, 60))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jLabel2))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jPrivateKeyPassphrase_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPrivateKeyName_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPrivateKeyEmail_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jPrivateKeyGenerate_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPrivateKeyDelete_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jPrivateKeyDSABits_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jPrivateKeyImport_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPrivateKeyExport_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(114, 114, 114))
        );

        jTabs.addTab("Private Keys", jPanel1);

        jStatusbar.setEditable(false);
        jStatusbar.setText("Success");
        jStatusbar.setFocusable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jStatusbar)
            .addComponent(jTabs, javax.swing.GroupLayout.DEFAULT_SIZE, 866, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabs, javax.swing.GroupLayout.DEFAULT_SIZE, 534, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(jStatusbar, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jSend_SendButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSend_SendButtonMouseClicked
        // Read original message
        String textMessage = jSend_BodyTextarea.getText();
        byte[] byteMessage = textMessage.getBytes();
        
        // Read encryption metadata
        boolean confidentiality = false;
        boolean signature = false;
        boolean compression = false;
        boolean conversionToRadix64 = false;
        
        byte[] senderSignaturePrivateKey = Hex.decode("e04fd020ea3a6910a2d808002b30309d");
        byte[] senderConfidentialityPublicKey = Hex.decode("e04fd020ea3a6910a2d808002b30309d");
        
        Encryption.SymmetricEncrptionAlgorithm encryptionAlgorithm = Encryption.SymmetricEncrptionAlgorithm.NONE;
        
        byte[] senderPassphrase = Hex.decode("e04fd020ea3a6910a2d808002b30309d");
        
        // Encryption
        byte[] encryptedMessage = Encryption.encrypt(
                byteMessage,
                senderSignaturePrivateKey,
                senderConfidentialityPublicKey,
                encryptionAlgorithm,
                senderPassphrase,
                confidentiality,
                signature,
                compression,
                conversionToRadix64);
        
        // TODO(Marko): Read the actual file path in a new dialog
        String encryptedFilePath = "C:\\Users\\User\\Desktop\\test.txt";
        
        // Store file
        Utils.writeToFile(encryptedFilePath, encryptedMessage);
        
        System.out.println("INFO: Stored encrypted file.");
    }//GEN-LAST:event_jSend_SendButtonMouseClicked

    private void jRecv_OpenButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jRecv_OpenButtonMouseClicked
        // TODO(Marko): Read the actual file path in a new dialog
        String encryptedFilePath = "C:\\Users\\User\\Desktop\\test.txt";
        
        // Decryption metadata
        byte[] encryptedMessage = Utils.readFromFile(encryptedFilePath);
        byte[] receiverPassphrase = Hex.decode("e04fd020ea3a6910a2d808002b30309d");
        
        // Read key values
        byte[] senderPublicKey = Hex.decode("e04fd020ea3a6910a2d808002b30309d");
        byte[] receiverPrivateKey = Hex.decode("e04fd020ea3a6910a2d808002b30309d");
        
        // Decryption
        Encryption.DecryptedMessage decryptedMessage = Encryption.decrypt(
                encryptedMessage,
                senderPublicKey,
                receiverPrivateKey);
        String dectryptedMessage = new String(decryptedMessage.decryptedMessage);
        
        // Write output
        jRecv_BodyTextarea.setText(dectryptedMessage);
        currentMessage = dectryptedMessage;
    }//GEN-LAST:event_jRecv_OpenButtonMouseClicked

    private void jRecv_SaveButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jRecv_SaveButtonMouseClicked
        if (currentMessage == null) {
            System.out.println("Trenutno nema primljene poruke.");
            return;
        }
        
        // TODO(Marko): Read the actual file path in a new dialog
        String decryptedFilePath = "C:\\Users\\User\\Desktop\\received.txt";
        
        Utils.writeToFile(decryptedFilePath, currentMessage.getBytes());
    }//GEN-LAST:event_jRecv_SaveButtonMouseClicked

    private void jDeletePublicKey_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDeletePublicKey_ButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jDeletePublicKey_ButtonActionPerformed

    private void jDeletePublicKey_ButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jDeletePublicKey_ButtonMouseClicked
        int rowIdx = jPublicKeyRings_Table.getSelectedRow();
        
        if (rowIdx < 0) {
            jStatusbar.setText("A key must be selected in order to perform delete operation!.");
            return;
        }
        
        long keyID = (long) jPublicKeyRings_Table.getValueAt(rowIdx, 2);
        try {
            PGPPublicKeyRing keyRingToBeDeleted = PGPKeys.findPublicKeyRing(keyID);
            PGPKeys.removePublicKey(keyRingToBeDeleted);
            PGPKeys.savePublicKeysToFile();
            populatePublicKeyRingTable();
            jStatusbar.setText("Deleted public key successfully.");
        } catch (IOException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
        } catch (PGPException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jDeletePublicKey_ButtonMouseClicked

    private void jImportPublicKey_ButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jImportPublicKey_ButtonMouseClicked
        // TODO (Marko) Get this using dialog component
        String importPublicKeyFilePath = "C:\\Users\\User\\Desktop\\export-public.asc";
        
        try {
            PGPKeys.importPublicKey(new File(importPublicKeyFilePath));
            populatePublicKeyRingTable();
        } catch (IOException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
        } catch (PGPException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        populatePublicKeyRingTable();
    }//GEN-LAST:event_jImportPublicKey_ButtonMouseClicked

    private void jExportPublicKey_ButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jExportPublicKey_ButtonMouseClicked
        // TODO (Marko) Get this using dialog component
        String exportPublicKeyFilePath = "C:\\Users\\User\\Desktop\\export-public.asc";
        
        int rowIdx = jPublicKeyRings_Table.getSelectedRow();
        
        if (rowIdx < 0) {
            jStatusbar.setText("A key must be selected in order to perform export operation!.");
            return;
        }
        
        long keyID = (long) jPublicKeyRings_Table.getValueAt(rowIdx, 2);
        try {
            PGPPublicKeyRing keyRingToBeExported = PGPKeys.findPublicKeyRing(keyID);
            PGPKeys.exportPublicKey(keyRingToBeExported, new File(exportPublicKeyFilePath));
            jStatusbar.setText("Exported public key successfully.");
        } catch (IOException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
        } catch (PGPException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jExportPublicKey_ButtonMouseClicked

    private void jImportPublicKey_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jImportPublicKey_ButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jImportPublicKey_ButtonActionPerformed

    private void jPrivateKeyDSABits_ComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPrivateKeyDSABits_ComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jPrivateKeyDSABits_ComboBoxActionPerformed
    
    void populatePublicKeyRingTable() {
        try {
            PGPPublicKeyRingCollection publicKeyRing = PGPKeys.getPublicKeysCollection();
            DefaultTableModel model = (DefaultTableModel) jPublicKeyRings_Table.getModel();
            int rowCount = model.getRowCount();
            //Remove rows one by one from the end of the table
            for (int i = rowCount - 1; i >= 0; i--) {
                model.removeRow(i);
            }
                
            Iterator<PGPPublicKeyRing> keyRingIter2 = PGPKeys.getPublicKeysCollection().getKeyRings();
            while (keyRingIter2.hasNext()) {
                PGPPublicKeyRing keyRing = keyRingIter2.next();

                Iterator<PGPPublicKey> keyIter = keyRing.getPublicKeys();
                PGPPublicKey key = keyIter.next();
                
                model.addRow(new Object[]{new String((byte[]) key.getRawUserIDs().next(),StandardCharsets.UTF_8), Integer.toHexString((int) key.getKeyID()), key.getKeyID()});                
            }
        } catch (IOException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
        } catch (PGPException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    void populatePrivateKeyRingTable() {
        try {
            PGPSecretKeyRingCollection secretKeyRing = PGPKeys.getSecretKeysCollection();
            
            DefaultTableModel model = (DefaultTableModel) jPrivateKeyRings_Table.getModel();
            int rowCount = model.getRowCount();
            //Remove rows one by one from the end of the table
            for (int i = rowCount - 1; i >= 0; i--) {
                model.removeRow(i);
            }
                
            Iterator<PGPSecretKeyRing> keyRingIter2 = PGPKeys.getSecretKeysCollection().getKeyRings();
            while (keyRingIter2.hasNext()) {
                PGPSecretKeyRing keyRing = keyRingIter2.next();

                Iterator<PGPSecretKey> keyIter = keyRing.getSecretKeys();
                PGPSecretKey key = keyIter.next();
                
                String nameAndEmail = (String) key.getUserIDs().next();
                String[] parsed = nameAndEmail.split(" ");
                String email = parsed[parsed.length - 1];
                String name = "";
                for (int i = 0; i < parsed.length - 1; i++) {
                    name += parsed[i];
                }
                
                model.addRow(new Object[]{name, email, Integer.toHexString((int) key.getKeyID()), key.getKeyID()});
            }
        } catch (IOException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
        } catch (PGPException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /*try {
            // Get secret and public key ring collections
            System.out.println("Get secret and public key ring collections");
            PGPSecretKeyRingCollection secretKeyRing = PGPKeys.getSecretKeysCollection();
            PGPPublicKeyRingCollection publicKeyRing = PGPKeys.getPublicKeysCollection();
            
            // Print all private key rings from the private key ring collection
            System.out.println("Print all private key rings from the private key ring collection");
            Iterator<PGPSecretKeyRing> keyRingIter = PGPKeys.getSecretKeysCollection().getKeyRings();
	          
            while (keyRingIter.hasNext()) {
                PGPSecretKeyRing keyRing = keyRingIter.next();
	                    
                Iterator<PGPSecretKey> keyIter = keyRing.getSecretKeys();
                PGPSecretKey key = keyIter.next();
                PGPPrivateKey privateKey = key.extractPrivateKey(new JcePBESecretKeyDecryptorBuilder().setProvider("BC").build("Sifra123".toCharArray()));
                PGPPublicKey  publicKey = key.getPublicKey();
                System.out.println(Integer.toHexString((int) key.getKeyID()) + " " + key.getUserIDs().next());
            }
            
            // Print all public key rings from the public key ring collection
            System.out.println("Print all public key rings from the public key ring collection");
            Iterator<PGPPublicKeyRing> keyRingIter2 = PGPKeys.getPublicKeysCollection().getKeyRings();
            while (keyRingIter2.hasNext()) {
                PGPPublicKeyRing keyRing = keyRingIter2.next();

                Iterator<PGPPublicKey> keyIter = keyRing.getPublicKeys();
                PGPPublicKey key = keyIter.next();

                System.out.println(Integer.toHexString((int) key.getKeyID()) + " " + key.getRawUserIDs().next());
                
                File publicKeyFile = new File("C:\\Users\\User\\Desktop\\test-key-public.asc");
                PGPKeys.exportPublicKey(keyRing, publicKeyFile);
                break;
            }
            
            // Create new public and private key rings
            System.out.println("Create new public and private key rings");
            String name1 = "Nikola Vucenovic <nikolavucenovic97@gmail.com>";
            String password1 = "Sifra123";
            String name2 = "Milo Tomasevic <milo@gmail.com>";
            String password2 = "Sifra123";
            PGPKeyRingGenerator pgpKeyRingGenerator1 = PGPKeys.createPGPKeyRingGenerator(
                    PGPKeys.generateDsaKeyPair(1024),
                    PGPKeys.generateElGamalKeyPair(1024),
                    name1,
                    password1.toCharArray());
            PGPKeyRingGenerator pgpKeyRingGenerator2 = PGPKeys.createPGPKeyRingGenerator(
                    PGPKeys.generateDsaKeyPair(1024),
                    PGPKeys.generateElGamalKeyPair(1024),
                    name2,
                    password2.toCharArray());
            
            // Add private key to private key collection
            System.out.println("Add private key to private key collection");
            PGPKeys.addSecretKey(pgpKeyRingGenerator1);
            
            // Add public key to public key collection
            System.out.println("Add public key to public key collection");
            PGPKeys.addPublicKey(pgpKeyRingGenerator1);
            
            // Store private key ring collection
            System.out.println("Store private key ring collection");
            PGPKeys.saveSecretKeysToFile();
            
            // Store public key ring collection
            System.out.println("Store public key ring collection");
            PGPKeys.savePublicKeysToFile();
            
        } catch(Exception e) {
            e.printStackTrace();
        }
        
        try {
            PGPPublicKeyRingCollection publicKeyRing = PGPKeys.getPublicKeysCollection();
        } catch(Exception e) {
            e.printStackTrace();
        }*/
        
        // DefaultTableModel model = (DefaultTableModel) jPublicKeyRings_Table.getModel();
        // model.addRow(new Object[]{"Column 1", "Column 2"}); 
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new App().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JButton jDeletePublicKey_Button;
    private javax.swing.JButton jExportPublicKey_Button;
    private javax.swing.JButton jImportPublicKey_Button;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JComboBox<String> jPrivateKeyDSABits_ComboBox;
    private javax.swing.JButton jPrivateKeyDelete_Button;
    private javax.swing.JTextField jPrivateKeyEmail_TextField;
    private javax.swing.JButton jPrivateKeyExport_Button;
    private javax.swing.JButton jPrivateKeyGenerate_Button;
    private javax.swing.JButton jPrivateKeyImport_Button;
    private javax.swing.JTextField jPrivateKeyName_TextField;
    private javax.swing.JTextField jPrivateKeyPassphrase_TextField;
    private javax.swing.JTable jPrivateKeyRings_Table;
    private javax.swing.JTable jPublicKeyRings_Table;
    private javax.swing.JTextArea jRecv_BodyTextarea;
    private javax.swing.JCheckBox jRecv_CompressedCheckbox;
    private javax.swing.JButton jRecv_DecryptButton;
    private javax.swing.JCheckBox jRecv_EncodedCheckbox;
    private javax.swing.JLabel jRecv_EncryptionLabel;
    private javax.swing.JTextField jRecv_EncryptionTextbox;
    private javax.swing.JLabel jRecv_FromLabel;
    private javax.swing.JTextField jRecv_FromTextbox;
    private javax.swing.JButton jRecv_OpenButton;
    private javax.swing.JLabel jRecv_PassphraseLabel;
    private javax.swing.JPasswordField jRecv_PassphrasePasswordbox;
    private javax.swing.JButton jRecv_SaveButton;
    private javax.swing.JLabel jRecv_SignatureLabel;
    private javax.swing.JTextField jRecv_SignatureTextbox;
    private javax.swing.JPanel jRecv_Tab;
    private javax.swing.JLabel jRecv_ToLabel;
    private javax.swing.JTextField jRecv_ToTextbox;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextArea jSend_BodyTextarea;
    private javax.swing.JCheckBox jSend_CompressedCheckbox;
    private javax.swing.JCheckBox jSend_EncodedCheckbox;
    private javax.swing.JComboBox<String> jSend_EncryptionDropdown;
    private javax.swing.JLabel jSend_EncryptionLabel;
    private javax.swing.JComboBox<String> jSend_FromDropdown;
    private javax.swing.JLabel jSend_FromLabel;
    private javax.swing.JLabel jSend_PassphraseLabel;
    private javax.swing.JPasswordField jSend_PassphrasePasswordbox;
    private javax.swing.JButton jSend_SendButton;
    private javax.swing.JLabel jSend_SignatureLabel;
    private javax.swing.JTextField jSend_SignatureTextbox;
    private javax.swing.JPanel jSend_Tab;
    private javax.swing.JButton jSend_TestButton;
    private javax.swing.JComboBox<String> jSend_ToDropdown;
    private javax.swing.JLabel jSend_ToLabel;
    private javax.swing.JTextField jStatusbar;
    private javax.swing.JTabbedPane jTabs;
    private javax.swing.JPanel randomjavaname;
    // End of variables declaration//GEN-END:variables
}
