package etf.openpgp.iu170057d_sm170081d;

import java.io.File;
import java.util.Iterator;

import etf.openpgp.iu170057d_sm170081d.utils.FileUtils;
import etf.openpgp.iu170057d_sm170081d.encryption.Encryption;
import etf.openpgp.iu170057d_sm170081d.encryption.PGPKeys;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import org.bouncycastle.openpgp.PGPException;
import org.bouncycastle.openpgp.PGPKeyRingGenerator;
import org.bouncycastle.openpgp.PGPPublicKeyRing;
import org.bouncycastle.openpgp.PGPSecretKeyRing;
import org.bouncycastle.openpgp.PGPPublicKey;
import org.bouncycastle.openpgp.PGPSecretKey;

public class App extends javax.swing.JFrame
{

    Encryption.PgpMessage pgpMessage;

    /**
     * Creates new form App
     */
    public App()
    {
        initComponents();
        populatePublicKeyRingTable();
        populatePrivateKeyRingTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings( "unchecked" )
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabs = new javax.swing.JTabbedPane();
        jSend_Tab = new javax.swing.JPanel();
        jSend_FromLabel = new javax.swing.JLabel();
        jSend_ToLabel = new javax.swing.JLabel();
        jSend_FromCombobox = new javax.swing.JComboBox<>();
        jSend_ToCombobox = new javax.swing.JComboBox<>();
        jSend_BodyScrollpane = new javax.swing.JScrollPane();
        jSend_BodyTextarea = new javax.swing.JTextArea();
        jSend_SendButton = new javax.swing.JButton();
        jSend_EncryptionLabel = new javax.swing.JLabel();
        jSend_EncryptionCombobox = new javax.swing.JComboBox<>();
        jSend_PassphraseLabel = new javax.swing.JLabel();
        jSend_CompressionCheckbox = new javax.swing.JCheckBox();
        jSend_Radix64Checkbox = new javax.swing.JCheckBox();
        jSend_TestButton = new javax.swing.JButton();
        jSend_PassphrasePasswordbox = new javax.swing.JPasswordField();
        jSend_SignatureCheckbox = new javax.swing.JCheckBox();
        jSend_AddRecipientButton = new javax.swing.JButton();
        jRecv_Tab = new javax.swing.JPanel();
        jRecv_FromLabel = new javax.swing.JLabel();
        jRecv_ToLabel = new javax.swing.JLabel();
        jRecv_BodyScrollpane = new javax.swing.JScrollPane();
        jRecv_BodyTextarea = new javax.swing.JTextArea();
        jRecv_EncryptionLabel = new javax.swing.JLabel();
        jRecv_PassphraseLabel = new javax.swing.JLabel();
        jRecv_CompressionCheckbox = new javax.swing.JCheckBox();
        jRecv_Radix64Checkbox = new javax.swing.JCheckBox();
        jRecv_DecryptButton = new javax.swing.JButton();
        jRecv_PassphrasePasswordbox = new javax.swing.JPasswordField();
        jRecv_SignatureCheckbox = new javax.swing.JCheckBox();
        jRecv_OpenButton = new javax.swing.JButton();
        jRecv_SaveButton = new javax.swing.JButton();
        jRecv_EncryptionTextbox = new javax.swing.JTextField();
        jRecv_FromTextbox = new javax.swing.JTextField();
        jRecv_ToTextbox = new javax.swing.JTextField();
        jRecv_SignatureVerifiedCheckbox = new javax.swing.JCheckBox();
        jRecv_IntegrityVerifiedCheckbox = new javax.swing.JCheckBox();
        jPubl_Tab = new javax.swing.JPanel();
        jPubl_PublicKeyringsScrollpane = new javax.swing.JScrollPane();
        jPubl_PublicKeyringsTable = new javax.swing.JTable();
        jPubl_DeleteButton = new javax.swing.JButton();
        jPubl_ImportButton = new javax.swing.JButton();
        jPubl_ExportButton = new javax.swing.JButton();
        jPriv_Tab = new javax.swing.JPanel();
        jPriv_PrivateKeyringsScrollpane = new javax.swing.JScrollPane();
        jPriv_PrivateKeyringsTable = new javax.swing.JTable();
        jPriv_GenerateButton = new javax.swing.JButton();
        jPriv_ImportButton = new javax.swing.JButton();
        jPriv_ExportButton = new javax.swing.JButton();
        jPriv_NameTextbox = new javax.swing.JTextField();
        jPriv_NameLabel = new javax.swing.JLabel();
        jPriv_PassphraseLabel = new javax.swing.JLabel();
        jPriv_EmailTextbox = new javax.swing.JTextField();
        jPriv_EmailLabel = new javax.swing.JLabel();
        jPriv_DeleteButton = new javax.swing.JButton();
        jPriv_DSABitsCombobox = new javax.swing.JComboBox<>();
        jPriv_DSABitsLabel = new javax.swing.JLabel();
        jPriv_ElGamalBitsLabel = new javax.swing.JLabel();
        jPriv_ElGamalBitsCombobox = new javax.swing.JComboBox<>();
        jPriv_PassphrasePasswordbox = new javax.swing.JPasswordField();
        jStatusbar = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Pretty Good Privacy Client");
        setSize(new java.awt.Dimension(640, 480));

        jTabs.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        jTabs.setDoubleBuffered(true);
        jTabs.setPreferredSize(new java.awt.Dimension(640, 480));
        jTabs.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabsStateChanged(evt);
            }
        });

        jSend_Tab.setBorder(javax.swing.BorderFactory.createEmptyBorder(25, 30, 25, 30));
        jSend_Tab.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jSend_TabComponentShown(evt);
            }
        });

        jSend_FromLabel.setText("From");

        jSend_ToLabel.setText("To");

        jSend_FromCombobox.setMaximumRowCount(16);

        jSend_ToCombobox.setMaximumRowCount(16);

        jSend_BodyTextarea.setColumns(20);
        jSend_BodyTextarea.setLineWrap(true);
        jSend_BodyTextarea.setTabSize(4);
        jSend_BodyTextarea.setName(""); // NOI18N
        jSend_BodyScrollpane.setViewportView(jSend_BodyTextarea);

        jSend_SendButton.setText("Send");
        jSend_SendButton.setPreferredSize(new java.awt.Dimension(58, 32));
        jSend_SendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSend_SendButtonActionPerformed(evt);
            }
        });

        jSend_EncryptionLabel.setText("Encryption");

        jSend_EncryptionCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ElGamal + IDEA", "ElGamal + 3DES", "none" }));

        jSend_PassphraseLabel.setText("Passphrase");

        jSend_CompressionCheckbox.setSelected(true);
        jSend_CompressionCheckbox.setText("Compression ");
        jSend_CompressionCheckbox.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        jSend_Radix64Checkbox.setSelected(true);
        jSend_Radix64Checkbox.setText("Radix64 Encoding");
        jSend_Radix64Checkbox.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        jSend_TestButton.setText("Test");
        jSend_TestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSend_TestButtonActionPerformed(evt);
            }
        });

        jSend_SignatureCheckbox.setSelected(true);
        jSend_SignatureCheckbox.setText("Signature");
        jSend_SignatureCheckbox.setActionCommand("Signed");
        jSend_SignatureCheckbox.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jSend_SignatureCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSend_SignatureCheckboxActionPerformed(evt);
            }
        });

        jSend_AddRecipientButton.setText("Select Recipient");
        jSend_AddRecipientButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSend_AddRecipientButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jSend_TabLayout = new javax.swing.GroupLayout(jSend_Tab);
        jSend_Tab.setLayout(jSend_TabLayout);
        jSend_TabLayout.setHorizontalGroup(
            jSend_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSend_BodyScrollpane)
            .addGroup(jSend_TabLayout.createSequentialGroup()
                .addGroup(jSend_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jSend_FromLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSend_ToLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jSend_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSend_FromCombobox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSend_ToCombobox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jSend_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jSend_SendButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSend_AddRecipientButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addGroup(jSend_TabLayout.createSequentialGroup()
                .addGroup(jSend_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jSend_TabLayout.createSequentialGroup()
                        .addComponent(jSend_EncryptionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSend_EncryptionCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(jSend_PassphraseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jSend_TabLayout.createSequentialGroup()
                        .addComponent(jSend_CompressionCheckbox)
                        .addGap(18, 18, 18)
                        .addComponent(jSend_Radix64Checkbox)
                        .addGap(29, 29, 29)
                        .addComponent(jSend_SignatureCheckbox)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSend_PassphrasePasswordbox, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSend_TestButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jSend_TabLayout.setVerticalGroup(
            jSend_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jSend_TabLayout.createSequentialGroup()
                .addGroup(jSend_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jSend_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jSend_FromLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jSend_FromCombobox))
                    .addComponent(jSend_SendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addGroup(jSend_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jSend_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jSend_ToCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jSend_AddRecipientButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSend_ToLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSend_BodyScrollpane, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jSend_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSend_TestButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSend_PassphraseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSend_PassphrasePasswordbox, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSend_EncryptionCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSend_EncryptionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jSend_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSend_CompressionCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSend_Radix64Checkbox, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSend_SignatureCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25))
        );

        jTabs.addTab("Send email", jSend_Tab);

        jRecv_Tab.setBorder(javax.swing.BorderFactory.createEmptyBorder(25, 30, 25, 30));
        jRecv_Tab.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jRecv_TabComponentShown(evt);
            }
        });

        jRecv_FromLabel.setText("From");

        jRecv_ToLabel.setText("To");

        jRecv_BodyTextarea.setEditable(false);
        jRecv_BodyTextarea.setColumns(20);
        jRecv_BodyTextarea.setLineWrap(true);
        jRecv_BodyTextarea.setTabSize(4);
        jRecv_BodyTextarea.setName(""); // NOI18N
        jRecv_BodyScrollpane.setViewportView(jRecv_BodyTextarea);

        jRecv_EncryptionLabel.setText("Encryption");

        jRecv_PassphraseLabel.setText("Passphrase");

        jRecv_CompressionCheckbox.setText("Compression ");
        jRecv_CompressionCheckbox.setEnabled(false);
        jRecv_CompressionCheckbox.setFocusable(false);
        jRecv_CompressionCheckbox.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        jRecv_Radix64Checkbox.setText("Radix64 Encoding");
        jRecv_Radix64Checkbox.setEnabled(false);
        jRecv_Radix64Checkbox.setFocusable(false);
        jRecv_Radix64Checkbox.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        jRecv_DecryptButton.setText("Decrypt");
        jRecv_DecryptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRecv_DecryptButtonActionPerformed(evt);
            }
        });

        jRecv_PassphrasePasswordbox.setEditable(false);

        jRecv_SignatureCheckbox.setText("Signed");
        jRecv_SignatureCheckbox.setEnabled(false);
        jRecv_SignatureCheckbox.setFocusable(false);
        jRecv_SignatureCheckbox.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jRecv_SignatureCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRecv_SignatureCheckboxActionPerformed(evt);
            }
        });

        jRecv_OpenButton.setText("Open");
        jRecv_OpenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRecv_OpenButtonActionPerformed(evt);
            }
        });

        jRecv_SaveButton.setText("Save");
        jRecv_SaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRecv_SaveButtonActionPerformed(evt);
            }
        });

        jRecv_EncryptionTextbox.setEditable(false);

        jRecv_FromTextbox.setEditable(false);

        jRecv_ToTextbox.setEditable(false);

        jRecv_SignatureVerifiedCheckbox.setText("Signature Verified");
        jRecv_SignatureVerifiedCheckbox.setEnabled(false);
        jRecv_SignatureVerifiedCheckbox.setFocusable(false);
        jRecv_SignatureVerifiedCheckbox.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jRecv_SignatureVerifiedCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRecv_SignatureVerifiedCheckboxActionPerformed(evt);
            }
        });

        jRecv_IntegrityVerifiedCheckbox.setText("Integrity Verified");
        jRecv_IntegrityVerifiedCheckbox.setEnabled(false);
        jRecv_IntegrityVerifiedCheckbox.setFocusable(false);
        jRecv_IntegrityVerifiedCheckbox.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jRecv_IntegrityVerifiedCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRecv_IntegrityVerifiedCheckboxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jRecv_TabLayout = new javax.swing.GroupLayout(jRecv_Tab);
        jRecv_Tab.setLayout(jRecv_TabLayout);
        jRecv_TabLayout.setHorizontalGroup(
            jRecv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jRecv_TabLayout.createSequentialGroup()
                .addGroup(jRecv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jRecv_FromLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRecv_ToLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jRecv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRecv_FromTextbox)
                    .addComponent(jRecv_ToTextbox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jRecv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRecv_OpenButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRecv_SaveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addComponent(jRecv_BodyScrollpane, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jRecv_TabLayout.createSequentialGroup()
                .addGroup(jRecv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jRecv_TabLayout.createSequentialGroup()
                        .addComponent(jRecv_EncryptionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRecv_EncryptionTextbox, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jRecv_TabLayout.createSequentialGroup()
                        .addComponent(jRecv_CompressionCheckbox)
                        .addGap(18, 18, 18)
                        .addComponent(jRecv_Radix64Checkbox)))
                .addGap(36, 36, 36)
                .addGroup(jRecv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jRecv_PassphraseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRecv_SignatureCheckbox))
                .addGroup(jRecv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jRecv_TabLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRecv_PassphrasePasswordbox, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRecv_DecryptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jRecv_TabLayout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(jRecv_SignatureVerifiedCheckbox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jRecv_IntegrityVerifiedCheckbox)
                        .addGap(29, 29, 29))))
        );
        jRecv_TabLayout.setVerticalGroup(
            jRecv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jRecv_TabLayout.createSequentialGroup()
                .addGroup(jRecv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jRecv_TabLayout.createSequentialGroup()
                        .addGroup(jRecv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRecv_FromLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jRecv_FromTextbox, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jRecv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jRecv_ToTextbox, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jRecv_ToLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jRecv_TabLayout.createSequentialGroup()
                        .addComponent(jRecv_OpenButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jRecv_SaveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jRecv_BodyScrollpane, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jRecv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRecv_DecryptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRecv_PassphraseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRecv_PassphrasePasswordbox, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRecv_EncryptionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRecv_EncryptionTextbox, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jRecv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRecv_CompressionCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRecv_Radix64Checkbox, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRecv_SignatureCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRecv_SignatureVerifiedCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRecv_IntegrityVerifiedCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34))
        );

        jTabs.addTab("Receive email", jRecv_Tab);

        jPubl_Tab.setBorder(javax.swing.BorderFactory.createEmptyBorder(25, 30, 25, 30));
        jPubl_Tab.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jPubl_TabComponentShown(evt);
            }
        });

        jPubl_PublicKeyringsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Email", "Key Id", "PublicKeyValue"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jPubl_PublicKeyringsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jPubl_PublicKeyringsScrollpane.setViewportView(jPubl_PublicKeyringsTable);
        if (jPubl_PublicKeyringsTable.getColumnModel().getColumnCount() > 0) {
            jPubl_PublicKeyringsTable.getColumnModel().getColumn(2).setMinWidth(0);
            jPubl_PublicKeyringsTable.getColumnModel().getColumn(2).setPreferredWidth(0);
            jPubl_PublicKeyringsTable.getColumnModel().getColumn(2).setMaxWidth(0);
        }

        jPubl_DeleteButton.setText("Delete");
        jPubl_DeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPubl_DeleteButtonActionPerformed(evt);
            }
        });

        jPubl_ImportButton.setText("Import");
        jPubl_ImportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPubl_ImportButtonActionPerformed(evt);
            }
        });

        jPubl_ExportButton.setText("Export");
        jPubl_ExportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPubl_ExportButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPubl_TabLayout = new javax.swing.GroupLayout(jPubl_Tab);
        jPubl_Tab.setLayout(jPubl_TabLayout);
        jPubl_TabLayout.setHorizontalGroup(
            jPubl_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPubl_TabLayout.createSequentialGroup()
                .addComponent(jPubl_DeleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(jPubl_ImportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPubl_ExportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPubl_PublicKeyringsScrollpane)
        );
        jPubl_TabLayout.setVerticalGroup(
            jPubl_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPubl_TabLayout.createSequentialGroup()
                .addComponent(jPubl_PublicKeyringsScrollpane, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE)
                .addGap(36, 36, 36)
                .addGroup(jPubl_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jPubl_DeleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPubl_ImportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPubl_ExportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jTabs.addTab("Public Keys", jPubl_Tab);

        jPriv_Tab.setBorder(javax.swing.BorderFactory.createEmptyBorder(25, 30, 25, 30));
        jPriv_Tab.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jPriv_TabComponentShown(evt);
            }
        });

        jPriv_PrivateKeyringsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Email", "Key Id", "PrivateKeyId"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jPriv_PrivateKeyringsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jPriv_PrivateKeyringsScrollpane.setViewportView(jPriv_PrivateKeyringsTable);
        if (jPriv_PrivateKeyringsTable.getColumnModel().getColumnCount() > 0) {
            jPriv_PrivateKeyringsTable.getColumnModel().getColumn(3).setMinWidth(0);
            jPriv_PrivateKeyringsTable.getColumnModel().getColumn(3).setPreferredWidth(0);
            jPriv_PrivateKeyringsTable.getColumnModel().getColumn(3).setMaxWidth(0);
        }

        jPriv_GenerateButton.setText("Generate");
        jPriv_GenerateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPriv_GenerateButtonActionPerformed(evt);
            }
        });

        jPriv_ImportButton.setText("Import");
        jPriv_ImportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPriv_ImportButtonActionPerformed(evt);
            }
        });

        jPriv_ExportButton.setText("Export");
        jPriv_ExportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPriv_ExportButtonActionPerformed(evt);
            }
        });

        jPriv_NameLabel.setText("Name");

        jPriv_PassphraseLabel.setText("Passphrase");

        jPriv_EmailLabel.setText("Email");

        jPriv_DeleteButton.setText("Delete");
        jPriv_DeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPriv_DeleteButtonActionPerformed(evt);
            }
        });

        jPriv_DSABitsCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2048", "1024" }));

        jPriv_DSABitsLabel.setText("DSA bits");

        jPriv_ElGamalBitsLabel.setText("ElGamal bits");

        jPriv_ElGamalBitsCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "4096", "2048", "1024" }));

        javax.swing.GroupLayout jPriv_TabLayout = new javax.swing.GroupLayout(jPriv_Tab);
        jPriv_Tab.setLayout(jPriv_TabLayout);
        jPriv_TabLayout.setHorizontalGroup(
            jPriv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPriv_TabLayout.createSequentialGroup()
                .addComponent(jPriv_DeleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(jPriv_ImportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPriv_ExportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(jPriv_GenerateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jPriv_PrivateKeyringsScrollpane)
            .addGroup(jPriv_TabLayout.createSequentialGroup()
                .addGroup(jPriv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPriv_NameLabel)
                    .addComponent(jPriv_NameTextbox, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPriv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPriv_EmailTextbox, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                    .addComponent(jPriv_EmailLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPriv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPriv_PassphrasePasswordbox, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
                    .addComponent(jPriv_PassphraseLabel))
                .addGap(18, 18, 18)
                .addGroup(jPriv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPriv_DSABitsLabel)
                    .addComponent(jPriv_DSABitsCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPriv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPriv_ElGamalBitsLabel)
                    .addComponent(jPriv_ElGamalBitsCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        jPriv_TabLayout.setVerticalGroup(
            jPriv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPriv_TabLayout.createSequentialGroup()
                .addComponent(jPriv_PrivateKeyringsScrollpane, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPriv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPriv_TabLayout.createSequentialGroup()
                        .addGroup(jPriv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPriv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jPriv_EmailLabel)
                                .addComponent(jPriv_NameLabel))
                            .addComponent(jPriv_PassphraseLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPriv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jPriv_NameTextbox, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPriv_EmailTextbox, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPriv_PassphrasePasswordbox, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPriv_TabLayout.createSequentialGroup()
                        .addComponent(jPriv_ElGamalBitsLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPriv_ElGamalBitsCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPriv_TabLayout.createSequentialGroup()
                        .addComponent(jPriv_DSABitsLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPriv_DSABitsCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(36, 36, 36)
                .addGroup(jPriv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jPriv_ImportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPriv_ExportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPriv_DeleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPriv_GenerateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jTabs.addTab("Private Keys", jPriv_Tab);

        jStatusbar.setEditable(false);
        jStatusbar.setText("Status");
        jStatusbar.setFocusable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jStatusbar)
            .addComponent(jTabs, javax.swing.GroupLayout.DEFAULT_SIZE, 740, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabs, javax.swing.GroupLayout.DEFAULT_SIZE, 494, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(jStatusbar, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jTabs.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jPriv_DeleteButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jPriv_DeleteButtonActionPerformed
    {//GEN-HEADEREND:event_jPriv_DeleteButtonActionPerformed
        int rowIdx = jPriv_PrivateKeyringsTable.getSelectedRow();

        if( rowIdx < 0 )
        {
            jStatusbar.setText( "A key must be selected in order to perform delete operation!." );
            return;
        }

        long keyID = ( long )jPriv_PrivateKeyringsTable.getValueAt( rowIdx, 3 );
        try
        {
            PGPSecretKeyRing secretKeyringToBeDeleted = PGPKeys.getSecretKeyRing( keyID );
            PGPKeys.removeSecretKey( secretKeyringToBeDeleted );

            PGPKeys.saveSecretKeysToFile();
            populatePrivateKeyRingTable();

            jStatusbar.setText( "Deleted private key successfully." );
        }
        catch( IOException | PGPException ex )
        {
            Logger.getLogger( App.class.getName() ).log( Level.INFO, "Could not delete private key.", ex );
            jStatusbar.setText( "Could not delete private key." );
        }
    }//GEN-LAST:event_jPriv_DeleteButtonActionPerformed

    private void jPriv_ExportButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jPriv_ExportButtonActionPerformed
    {//GEN-HEADEREND:event_jPriv_ExportButtonActionPerformed
        String exportSecretKeyFilePath = FileUtils.getUserSelectedFilePath( FileUtils.SAVE_DIALOG, FileUtils.PGP_KEY_FILE );
        if( exportSecretKeyFilePath == null )
        {
            jStatusbar.setText( "No file selected." );
            return;
        }

        int rowIdx = jPriv_PrivateKeyringsTable.getSelectedRow();

        if( rowIdx < 0 )
        {
            jStatusbar.setText( "A key must be selected in order to perform export operation!." );
            return;
        }

        long keyID = ( long )jPriv_PrivateKeyringsTable.getValueAt( rowIdx, 3 );
        try
        {
            PGPSecretKeyRing keyRingToBeExported = PGPKeys.getSecretKeyRing( keyID );
            PGPKeys.exportSecretKey( keyRingToBeExported, new File( exportSecretKeyFilePath ) );
            jStatusbar.setText( "Exported private key successfully." );
        }
        catch( IOException | PGPException ex )
        {
            Logger.getLogger( App.class.getName() ).log( Level.INFO, "Could not export private key.", ex );
            jStatusbar.setText( "Could not export private key." );
        }
    }//GEN-LAST:event_jPriv_ExportButtonActionPerformed

    private void jPriv_ImportButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jPriv_ImportButtonActionPerformed
    {//GEN-HEADEREND:event_jPriv_ImportButtonActionPerformed
        String importSecretKeyFilePath = FileUtils.getUserSelectedFilePath( FileUtils.OPEN_DIALOG, FileUtils.PGP_KEY_FILE );
        if( importSecretKeyFilePath == null )
        {
            jStatusbar.setText( "No file selected." );
            return;
        }

        try
        {
            PGPKeys.importSecretKey( new File( importSecretKeyFilePath ) );
            PGPKeys.saveSecretKeysToFile();
            populatePrivateKeyRingTable();
            jStatusbar.setText( "Imported private key successfully." );
        }
        catch( IOException | PGPException ex )
        {
            Logger.getLogger( App.class.getName() ).log( Level.INFO, "Could not import private key.", ex );
            jStatusbar.setText( "Could not import private key." );
        }
        catch( IllegalArgumentException ex )
        {
            Logger.getLogger( App.class.getName() ).log( Level.INFO, "Private key already exists in keyring.", ex );
            jStatusbar.setText( "Private key already exists in keyring." );
        }
    }//GEN-LAST:event_jPriv_ImportButtonActionPerformed

    private void jPriv_GenerateButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jPriv_GenerateButtonActionPerformed
    {//GEN-HEADEREND:event_jPriv_GenerateButtonActionPerformed
        // TODO: check why DSS 2048 and ElGamal 4096 generation never completes
        int selectedDSABitsIndex = jPriv_DSABitsCombobox.getSelectedIndex();
        int selectedDSABits = Integer.parseInt( jPriv_DSABitsCombobox.getItemAt( selectedDSABitsIndex ) );

        int selectedElGamalBitsIndex = jPriv_ElGamalBitsCombobox.getSelectedIndex();
        int selectedElGamalBits = Integer.parseInt( jPriv_ElGamalBitsCombobox.getItemAt( selectedElGamalBitsIndex ) );

        String name = jPriv_NameTextbox.getText();
        String email = jPriv_EmailTextbox.getText();
        String passphrase = jPriv_PassphrasePasswordbox.getText();

        if( "".equals( name ) || "".equals( email ) || "".equals( passphrase ) )
        {
            jStatusbar.setText( "Invalid private key generation data." );
            return;
        }

        String userID = name + " <" + email + ">";

        try
        {
            PGPKeyRingGenerator pgpKeyRingGenerator = PGPKeys.createPGPKeyRingGenerator(
                    PGPKeys.generateDsaKeyPair( selectedDSABits ),
                    PGPKeys.generateElGamalKeyPair( selectedElGamalBits ),
                    userID,
                    passphrase.toCharArray() );

            PGPKeys.addPublicKey( pgpKeyRingGenerator );
            PGPKeys.addSecretKey( pgpKeyRingGenerator );
            PGPKeys.savePublicKeysToFile();
            PGPKeys.saveSecretKeysToFile();

            populatePrivateKeyRingTable();
            populatePublicKeyRingTable();

            jPriv_NameTextbox.setText( "" );
            jPriv_EmailTextbox.setText( "" );
            jPriv_PassphrasePasswordbox.setText( "" );
            jStatusbar.setText( "Private key generated successfully." );
        }
        catch( Exception ex )
        {
            Logger.getLogger( App.class.getName() ).log( Level.INFO, "Could not generate private key.", ex );
            jStatusbar.setText( "Could not generate private key." );
        }
    }//GEN-LAST:event_jPriv_GenerateButtonActionPerformed

    private void jPubl_ExportButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jPubl_ExportButtonActionPerformed
    {//GEN-HEADEREND:event_jPubl_ExportButtonActionPerformed
        String exportPublicKeyFilePath = FileUtils.getUserSelectedFilePath( FileUtils.SAVE_DIALOG, FileUtils.PGP_KEY_FILE );
        if( exportPublicKeyFilePath == null )
        {
            jStatusbar.setText( "No file selected." );
            return;
        }

        int rowIdx = jPubl_PublicKeyringsTable.getSelectedRow();

        if( rowIdx < 0 )
        {
            jStatusbar.setText( "A public key must be selected in order to perform the export operation!" );
            return;
        }

        long keyID = ( long )jPubl_PublicKeyringsTable.getValueAt( rowIdx, 2 );
        try
        {
            PGPPublicKeyRing keyRingToBeExported = PGPKeys.getPublicKeyRing( keyID );
            PGPKeys.exportPublicKey( keyRingToBeExported, new File( exportPublicKeyFilePath ) );
            jStatusbar.setText( "Exported public key successfully." );
        }
        catch( IOException | PGPException ex )
        {
            Logger.getLogger( App.class.getName() ).log( Level.INFO, "Could not export public key.", ex );
            jStatusbar.setText( "Could not export public key." );
        }
    }//GEN-LAST:event_jPubl_ExportButtonActionPerformed

    private void jPubl_ImportButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jPubl_ImportButtonActionPerformed
    {//GEN-HEADEREND:event_jPubl_ImportButtonActionPerformed
        String importPublicKeyFilePath = FileUtils.getUserSelectedFilePath( FileUtils.OPEN_DIALOG, FileUtils.PGP_KEY_FILE );
        if( importPublicKeyFilePath == null )
        {
            jStatusbar.setText( "No file selected." );
            return;
        }

        try
        {
            PGPKeys.importPublicKey( new File( importPublicKeyFilePath ) );
            PGPKeys.savePublicKeysToFile();
            populatePublicKeyRingTable();
            jStatusbar.setText( "Imported public key successfully." );
        }
        catch( IOException | PGPException ex )
        {
            Logger.getLogger( App.class.getName() ).log( Level.INFO, "Could not import public key.", ex );
            jStatusbar.setText( "Could not import public key." );
        }
        catch( IllegalArgumentException ex )
        {
            Logger.getLogger( App.class.getName() ).log( Level.INFO, "Private key already exists in keyring.", ex );
            jStatusbar.setText( "Private key already exists in keyring." );
        }
    }//GEN-LAST:event_jPubl_ImportButtonActionPerformed

    private void jPubl_DeleteButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jPubl_DeleteButtonActionPerformed
    {//GEN-HEADEREND:event_jPubl_DeleteButtonActionPerformed
        int rowIdx = jPubl_PublicKeyringsTable.getSelectedRow();

        if( rowIdx < 0 )
        {
            jStatusbar.setText( "A public key must be selected in order to perform the delete operation!" );
            return;
        }

        long keyID = ( long )jPubl_PublicKeyringsTable.getValueAt( rowIdx, 2 );
        try
        {
            PGPPublicKeyRing keyRingToBeDeleted = PGPKeys.getPublicKeyRing( keyID );
            PGPKeys.removePublicKey( keyRingToBeDeleted );
            PGPKeys.savePublicKeysToFile();
            populatePublicKeyRingTable();

            jStatusbar.setText( "Deleted public key successfully." );
        }
        catch( IOException | PGPException ex )
        {
            Logger.getLogger( App.class.getName() ).log( Level.INFO, "Could not delete public key.", ex );
            jStatusbar.setText( "Could not delete public key." );
        }
    }//GEN-LAST:event_jPubl_DeleteButtonActionPerformed

    private void jRecv_SaveButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jRecv_SaveButtonActionPerformed
    {//GEN-HEADEREND:event_jRecv_SaveButtonActionPerformed
        jStatusbar.setText( "" );
        String to = jRecv_ToTextbox.getText();
        String from = jRecv_FromTextbox.getText();
        String message = jRecv_BodyTextarea.getText();

        if( "".equals( message ) )
        {
            jStatusbar.setText( "A message must be opened first." );
            return;
        }

        String saveMessageFilePath = FileUtils.getUserSelectedFilePath( FileUtils.SAVE_DIALOG, FileUtils.TXT_FILE );
        if( saveMessageFilePath == null )
        {
            jStatusbar.setText( "No file selected." );
            return;
        }

        String completeMessage = "From: " + from + "\n";
        completeMessage += "To: " + to + "\n\n";
        completeMessage += "Text: \n";
        completeMessage += message;
        FileUtils.writeToFile( saveMessageFilePath, completeMessage );

        jStatusbar.setText( "Saved message." );
    }//GEN-LAST:event_jRecv_SaveButtonActionPerformed

    private void jRecv_OpenButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jRecv_OpenButtonActionPerformed
    {//GEN-HEADEREND:event_jRecv_OpenButtonActionPerformed
        String encryptedFilePath = FileUtils.getUserSelectedFilePath( FileUtils.OPEN_DIALOG, FileUtils.PGP_MESSAGE_FILE );
        if( encryptedFilePath == null )
        {
            jStatusbar.setText( "No file selected." );
            return;
        }

        pgpMessage = new Encryption.PgpMessage();

        // Read encrypted message
        pgpMessage.encryptedMessage = FileUtils.readFromFile( encryptedFilePath );

        // Read PGP message (without decrypting it)
        try
        {
            Encryption.readPgpMessage( pgpMessage );
            resetReceiveTabComponents();

            if( pgpMessage.decryptedMessage == null )
            {
                pgpMessage.decryptedMessage = "???".getBytes();
            }
            jRecv_BodyTextarea.setText( new String( pgpMessage.decryptedMessage ) );
            if (!pgpMessage.isEncrypted)
            {
                jRecv_EncryptionTextbox.setText( "None" );
            }

            jRecv_CompressionCheckbox.setSelected( pgpMessage.isCompressed );
            jRecv_Radix64Checkbox.setSelected( pgpMessage.isRadix64Encoded );
            jRecv_SignatureCheckbox.setSelected( pgpMessage.isSigned );
            jRecv_SignatureVerifiedCheckbox.setSelected( pgpMessage.isSignatureVerified );
            jRecv_IntegrityVerifiedCheckbox.setSelected( pgpMessage.isIntegrityVerified );

            if( pgpMessage.isEncrypted )
            {
                jRecv_ToTextbox.setText( ( String )PGPKeys
                        .getPublicKeyRing( pgpMessage.receiverPublicKeyId )
                        .getPublicKey()
                        .getUserIDs()
                        .next() );
                jStatusbar.setText( "Enter passphrase and decrypt the message." );

                jRecv_PassphrasePasswordbox.setEditable( true );
                jRecv_PassphrasePasswordbox.setEnabled( true );
            }
            else
            {
                // TODO (urosisakovic): Fill From and To fields
                jStatusbar.setText( "Message shown. It was not encrypted." );
            }
        }
        catch( Exception ex )
        {
            jStatusbar.setText( "Error. Unable to open message." );
            Logger.getLogger( App.class.getName() ).log( Level.SEVERE, null, ex );
        }
    }//GEN-LAST:event_jRecv_OpenButtonActionPerformed

    private void jSend_TestButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jSend_TestButtonActionPerformed
    {//GEN-HEADEREND:event_jSend_TestButtonActionPerformed
        // Read sender secret key id
        int senderKeyComboBoxIndex = jSend_FromCombobox.getSelectedIndex();
        String senderNameAndKeyID = jSend_FromCombobox.getItemAt( senderKeyComboBoxIndex );
        String senderKeyIdHexString = senderNameAndKeyID.split( "\\|" )[ 1 ];
        long senderKeyID = PGPKeys.hexStringToKeyId( senderKeyIdHexString );

        PGPSecretKeyRing senderSecretKeyring;
        try
        {
            senderSecretKeyring = PGPKeys.getSecretKeyRing( senderKeyID );
        }
        catch( IOException | PGPException ex )
        {
            Logger.getLogger( App.class.getName() ).log( Level.SEVERE, "Could not find sender secret key in sender secret key dropdown.", ex );
            jStatusbar.setText( "Could not find sender secret key." );
            return;
        }

        char[] passphrase = jSend_PassphrasePasswordbox.getPassword();

        if( PGPKeys.isValidPassphrase( senderSecretKeyring, 0, passphrase ) )
        {
            jStatusbar.setText( "Valid passphrase." );
        }
        else
        {
            jStatusbar.setText( "Invalid passphrase." );
        }

        // necessary to prevent side channel attacks - memory reads of the passphrase
        for( int i = 0; i < passphrase.length; i++ )
            passphrase[ i ] = '\0';
    }//GEN-LAST:event_jSend_TestButtonActionPerformed

    private static String ConvertToSimplifiedRFC822(String emailFrom, String emailTo, String message)
    {
        String srfc822 = "From: " + emailFrom + "\n"
                + "To: " + emailTo + "\n"
                + "Message: " + "\n"
                + message;
       
        return srfc822;
    }
    
    public static class ReceivedMessage 
    {
        public String emailFrom;
        public String emailTo;
        public String message;
        
        public ReceivedMessage(String emailFrom, String emailTo, String message)
        {
            this.emailFrom = emailFrom;
            this.emailTo = emailTo;
            this.message = message;
        }
        
        public static ReceivedMessage fromSimplifiedRFC822(String srfc822) {
            int emailFromIndex = srfc822.indexOf("\n");
            String emailFrom = srfc822.substring(6, emailFromIndex);  // From: 
            srfc822 = srfc822.substring(emailFromIndex + 1, srfc822.length());
            
            int emailToIndex = srfc822.indexOf("\n");
            String emailTo = srfc822.substring(4, emailToIndex);  // To:
            srfc822 = srfc822.substring(emailToIndex + 1, srfc822.length());
            
            int messageStartIndex = srfc822.indexOf("\n");
            String message = srfc822.substring(messageStartIndex + 1, srfc822.length());
            
            return new ReceivedMessage(emailFrom, emailTo, message);
        }
        
        public void print()
        {
            System.out.println("From: " + emailFrom);
            System.out.println("To: " + emailTo);
            System.out.println("Message:\n" + message);
        }
    };
    
    private void jSend_SendButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jSend_SendButtonActionPerformed
    {//GEN-HEADEREND:event_jSend_SendButtonActionPerformed
        // Read original message
        String textMessage = jSend_BodyTextarea.getText();
        byte[] byteMessage = textMessage.getBytes();

        // Read encryption metadata
        boolean addSignature = jSend_SignatureCheckbox.isSelected();
        boolean addCompression = jSend_CompressionCheckbox.isSelected();
        boolean addConversionToRadix64 = jSend_Radix64Checkbox.isSelected();

        // Read sender secret key id
        int senderKeyComboBoxIndex = jSend_FromCombobox.getSelectedIndex();
        String senderNameAndKeyID = jSend_FromCombobox.getItemAt( senderKeyComboBoxIndex );
        if( senderNameAndKeyID == null )
        {
            jStatusbar.setText( "No sender emails registered." );
            return;
        }
        String senderKeyIdHexString = senderNameAndKeyID.split( "\\|" )[ 1 ];
        long senderKeyID = PGPKeys.hexStringToKeyId( senderKeyIdHexString );

        // Read sender secret key
        PGPSecretKeyRing senderSecretKeyring;
        PGPSecretKey senderSecretKey;
        try
        {
            senderSecretKeyring = PGPKeys.getSecretKeyRing( senderKeyID );
            Iterator<PGPSecretKey> keyIter = senderSecretKeyring.getSecretKeys();
            senderSecretKey = keyIter.next();
        }
        catch( IOException | PGPException ex )
        {
            Logger.getLogger( App.class.getName() ).log( Level.SEVERE, "Could not find sender secret key in sender secret key dropdown.", ex );
            jStatusbar.setText( "Could not find sender secret key." );
            return;
        }

        // Read sender passphrase
        char[] senderPassphrase = jSend_PassphrasePasswordbox.getPassword();

        if( addSignature && !PGPKeys.isValidPassphrase( senderSecretKeyring, 0, senderPassphrase ) )
        {
            jStatusbar.setText( "Invalid passphrase." );
            return;
        }

        // check if there is at least one selected recepient
        for( int i = 0; i < jSend_ToCombobox.getItemCount(); i++ )
        {
            // Read receiver public key id
            String receiverNameEmailAndKeyID = jSend_ToCombobox.getItemAt( i );
            if( "x ".equals( receiverNameEmailAndKeyID.substring( 0, 2 ) ) )
            {
                break;
            }
            if( i == jSend_ToCombobox.getItemCount() - 1 )
            {
                jStatusbar.setText( "No recepients selected." );
                return;
            }
        }

        // get the file path
        String selectedFilePath = FileUtils.getUserSelectedFilePath( FileUtils.SAVE_DIALOG, FileUtils.PGP_MESSAGE_FILE );
        if( selectedFilePath == null )
        {
            jStatusbar.setText( "No file selected." );
            return;
        }

        int sentMessagesCount = 0;
        for( int i = 0; i < jSend_ToCombobox.getItemCount(); i++ )
        {
            // Read receiver public key id
            String receiverNameEmailAndKeyID = jSend_ToCombobox.getItemAt( i );
            if( !"x ".equals( receiverNameEmailAndKeyID.substring( 0, 2 ) ) )
            {
                continue;
            }
            // remove the selection symbol from the receiver name, email and key id
            receiverNameEmailAndKeyID = receiverNameEmailAndKeyID.substring( 2 );

            // get the receiver key id
            String receiverKeyIdHexString = receiverNameEmailAndKeyID.split( "> \\| " )[ 1 ];
            long receiverKeyID = PGPKeys.hexStringToKeyId( receiverKeyIdHexString );

            // fix the receiver name, email and key id string
            receiverNameEmailAndKeyID = receiverNameEmailAndKeyID.replaceAll( "<", "[" );
            receiverNameEmailAndKeyID = receiverNameEmailAndKeyID.replaceAll( ">", "]" );
            receiverNameEmailAndKeyID = receiverNameEmailAndKeyID.replaceAll( "\\|", "." );

            // Read receiver public key
            PGPPublicKey receiverPublicKey;
            try
            {
                PGPPublicKeyRing receiverKeyRing = PGPKeys.getPublicKeyRing( receiverKeyID );
                Iterator<PGPPublicKey> keyIter = receiverKeyRing.getPublicKeys();
                keyIter.next();   // skip the DSA signing key, and use the ElGamal encryption key
                receiverPublicKey = keyIter.next();
            }
            catch( IOException | PGPException ex )
            {
                Logger.getLogger( App.class.getName() ).log( Level.SEVERE, "Receiver public key not read correctly -- impossible!", ex );
                jStatusbar.setText( "Receiver(s) public key corrupted." );
                return;
            }

            // Read encryption algorithm
            Encryption.EncryptionAlgorithm encryptionAlgorithm = Encryption.EncryptionAlgorithm.NONE;

            int encryptionAlgorithmIndex = jSend_EncryptionCombobox.getSelectedIndex();
            switch( encryptionAlgorithmIndex )
            {
                case 0:
                {
                    encryptionAlgorithm = Encryption.EncryptionAlgorithm.ELGAMAL_IDEA;
                    break;
                }
                case 1:
                {
                    encryptionAlgorithm = Encryption.EncryptionAlgorithm.ELGAMAL_3DES;
                    break;
                }
                case 2:
                {
                    encryptionAlgorithm = Encryption.EncryptionAlgorithm.NONE;
                    break;
                }
            }

            // Encryption
            byte[] encryptedMessage;
            try
            {
                encryptedMessage = Encryption.createPgpMessage(
                        byteMessage,
                        senderSecretKey,
                        receiverPublicKey,
                        encryptionAlgorithm,
                        senderPassphrase,
                        addSignature,
                        addCompression,
                        addConversionToRadix64 );
            }
            catch( IOException ex )
            {
                jStatusbar.setText( ex.getMessage() );
                return;
            }

            // Append receiver name to file path
            String filePath = selectedFilePath.replaceAll( "(\\..*)$", " . " + receiverNameEmailAndKeyID + "$1" );
            FileUtils.writeToFile( filePath, encryptedMessage );

            sentMessagesCount++;
        }

        switch( sentMessagesCount )
        {
            case 0:
                jStatusbar.setText( "No recipient selected." );
                break;
            case 1:
                jStatusbar.setText( "Sent message." );
                break;
            default:
                jStatusbar.setText( "Sent messages." );
                break;
        }
    }//GEN-LAST:event_jSend_SendButtonActionPerformed

    private void jRecv_DecryptButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jRecv_DecryptButtonActionPerformed
    {//GEN-HEADEREND:event_jRecv_DecryptButtonActionPerformed
        jStatusbar.setText( "Status" );

        char[] passphrase = jRecv_PassphrasePasswordbox.getPassword();

        // TODO(uros): Check if the passphrase is valid
        try
        {
            Encryption.decryptPgpMessage( passphrase, pgpMessage );

            System.out.println( "pgpMessage.senderSecretKeyId: " + pgpMessage.senderSecretKeyId );

            if( pgpMessage.senderSecretKeyId != 0 )
            {
                jRecv_FromTextbox.setText( ( String )PGPKeys
                        .getPublicKeyRing( pgpMessage.senderSecretKeyId )
                        .getPublicKey()
                        .getUserIDs()
                        .next() );
            }

            jRecv_BodyTextarea.setText( new String( pgpMessage.decryptedMessage ) );
            jRecv_EncryptionTextbox.setText( pgpMessage.encryptionAlgorithm );

            jRecv_CompressionCheckbox.setSelected( pgpMessage.isCompressed );
            jRecv_Radix64Checkbox.setSelected( pgpMessage.isRadix64Encoded );
            jRecv_SignatureCheckbox.setSelected( pgpMessage.isSigned );
            jRecv_SignatureVerifiedCheckbox.setSelected( pgpMessage.isSignatureVerified );
            jRecv_IntegrityVerifiedCheckbox.setSelected( pgpMessage.isIntegrityVerified );

            jStatusbar.setText( "Successfully decrypted message" );
        }
        catch( PGPException ex )
        {
            jStatusbar.setText( "Invalid passphrase." );
        }
        catch( IOException ex )
        {
            Logger.getLogger( App.class.getName() ).log( Level.SEVERE, null, ex );
        }
    }//GEN-LAST:event_jRecv_DecryptButtonActionPerformed


    private void jTabsStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_jTabsStateChanged
    {//GEN-HEADEREND:event_jTabsStateChanged
        jStatusbar.setText( "Status" );
    }//GEN-LAST:event_jTabsStateChanged

    private void jSend_TabComponentShown(java.awt.event.ComponentEvent evt)//GEN-FIRST:event_jSend_TabComponentShown
    {//GEN-HEADEREND:event_jSend_TabComponentShown
        populateEmailFromCombobox();
        populateEmailToCombobox();
        jSend_BodyTextarea.setText( "" );
        jSend_EncryptionCombobox.setSelectedIndex( 0 );
        jSend_PassphrasePasswordbox.setText( "" );
        jSend_CompressionCheckbox.setSelected( true );
        jSend_Radix64Checkbox.setSelected( true );
        jSend_SignatureCheckbox.setSelected( true );

        jSend_TestButton.setEnabled( true );
        jSend_PassphrasePasswordbox.setEnabled( jSend_SignatureCheckbox.isSelected() );
    }//GEN-LAST:event_jSend_TabComponentShown

    private void jRecv_TabComponentShown(java.awt.event.ComponentEvent evt)//GEN-FIRST:event_jRecv_TabComponentShown
    {//GEN-HEADEREND:event_jRecv_TabComponentShown
        resetReceiveTabComponents();
    }//GEN-LAST:event_jRecv_TabComponentShown

    private void jPubl_TabComponentShown(java.awt.event.ComponentEvent evt)//GEN-FIRST:event_jPubl_TabComponentShown
    {//GEN-HEADEREND:event_jPubl_TabComponentShown
        populatePublicKeyRingTable();
    }//GEN-LAST:event_jPubl_TabComponentShown

    private void jPriv_TabComponentShown(java.awt.event.ComponentEvent evt)//GEN-FIRST:event_jPriv_TabComponentShown
    {//GEN-HEADEREND:event_jPriv_TabComponentShown
        populatePrivateKeyRingTable();
        jPriv_NameTextbox.setText( "" );
        jPriv_EmailTextbox.setText( "" );
        jPriv_PassphrasePasswordbox.setText( "" );
        jPriv_DSABitsCombobox.setSelectedIndex( 0 );
        jPriv_ElGamalBitsCombobox.setSelectedIndex( 0 );

    }//GEN-LAST:event_jPriv_TabComponentShown

    private void jSend_SignatureCheckboxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jSend_SignatureCheckboxActionPerformed
    {//GEN-HEADEREND:event_jSend_SignatureCheckboxActionPerformed
        jSend_PassphrasePasswordbox.setText( "" );
        jSend_PassphrasePasswordbox.setEnabled( jSend_SignatureCheckbox.isSelected() );
        jSend_TestButton.setEnabled( jSend_SignatureCheckbox.isSelected() );
    }//GEN-LAST:event_jSend_SignatureCheckboxActionPerformed

    private void jRecv_SignatureCheckboxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jRecv_SignatureCheckboxActionPerformed
    {//GEN-HEADEREND:event_jRecv_SignatureCheckboxActionPerformed
        jRecv_PassphrasePasswordbox.setEnabled( jRecv_SignatureCheckbox.isSelected() );
    }//GEN-LAST:event_jRecv_SignatureCheckboxActionPerformed

    private void jSend_AddRecipientButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSend_AddRecipientButtonActionPerformed
        int currIndex = jSend_ToCombobox.getSelectedIndex();
        String currItem = jSend_ToCombobox.getItemAt( currIndex );
        jSend_ToCombobox.removeItemAt( currIndex );

        String newItem;
        if( "x ".equals( currItem.substring( 0, 2 ) ) )
        {
            newItem = currItem.substring( 2, currItem.length() );
        }
        else
        {
            newItem = "x " + currItem;
        }
        jSend_ToCombobox.insertItemAt( newItem, currIndex );
        jSend_ToCombobox.setSelectedIndex( currIndex );
    }//GEN-LAST:event_jSend_AddRecipientButtonActionPerformed

    private void jRecv_SignatureVerifiedCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRecv_SignatureVerifiedCheckboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRecv_SignatureVerifiedCheckboxActionPerformed

    private void jRecv_IntegrityVerifiedCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRecv_IntegrityVerifiedCheckboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRecv_IntegrityVerifiedCheckboxActionPerformed

    private void populateEmailFromCombobox()
    {
        jSend_FromCombobox.removeAllItems();

        try
        {
            Iterator<PGPSecretKeyRing> iter = PGPKeys.getSecretKeysCollection().getKeyRings();
            while( iter.hasNext() )
            {
                PGPSecretKeyRing keyRing = iter.next();

                Iterator<PGPSecretKey> keyIter = keyRing.getSecretKeys();
                PGPSecretKey key = keyIter.next();

                String nameAndEmail = ( String )key.getUserIDs().next();
                String[] parsed = nameAndEmail.split( " " );

                String userEmail = parsed[ parsed.length - 1 ];
                String userName = "";
                for( int i = 0; i < parsed.length - 1; i++ )
                {
                    userName += parsed[ i ];
                    if( i < parsed.length - 2 )
                    {
                        userName += " ";
                    }
                }

                String keyId = PGPKeys.keyIdToHexString( key.getKeyID() );

                jSend_FromCombobox.addItem( userName + " " + userEmail + " | " + keyId );
            }
        }
        catch( IOException | PGPException ex )
        {
            Logger.getLogger( App.class.getName() ).log( Level.SEVERE, "Could not populate <send from> combo box!", ex );
        }
    }

    private void populateEmailToCombobox()
    {
        jSend_ToCombobox.removeAllItems();

        try
        {
            Iterator<PGPPublicKeyRing> iter = PGPKeys.getPublicKeysCollection().getKeyRings();
            while( iter.hasNext() )
            {
                PGPPublicKeyRing keyRing = iter.next();

                Iterator<PGPPublicKey> keyIter = keyRing.getPublicKeys();
                PGPPublicKey key = keyIter.next();

                String userEmail = new String( ( byte[] )key.getRawUserIDs().next(), StandardCharsets.UTF_8 );
                String keyId = PGPKeys.keyIdToHexString( key.getKeyID() );
                jSend_ToCombobox.addItem( userEmail + " | " + keyId );
            }
        }
        catch( IOException | PGPException ex )
        {
            Logger.getLogger( App.class.getName() ).log( Level.SEVERE, "Could not populate <send to> combo box", ex );
        }
    }

    private void populatePublicKeyRingTable()
    {
        try
        {
            DefaultTableModel model = ( DefaultTableModel )jPubl_PublicKeyringsTable.getModel();
            int rowCount = model.getRowCount();
            //Remove rows one by one from the end of the table
            for( int i = rowCount - 1; i >= 0; i-- )
            {
                model.removeRow( i );
            }

            Iterator<PGPPublicKeyRing> iter = PGPKeys.getPublicKeysCollection().getKeyRings();
            while( iter.hasNext() )
            {
                PGPPublicKeyRing keyRing = iter.next();

                Iterator<PGPPublicKey> keyIter = keyRing.getPublicKeys();
                PGPPublicKey key = keyIter.next();

                model.addRow( new Object[]
                {
                    new String( ( byte[] )key.getRawUserIDs().next(), StandardCharsets.UTF_8 ), PGPKeys.keyIdToHexString( key.getKeyID() ), key.getKeyID()
                } );
            }
        }
        catch( IOException | PGPException ex )
        {
            Logger.getLogger( App.class.getName() ).log( Level.SEVERE, "Could not populate <public key ring table>", ex );
        }
    }

    private void populatePrivateKeyRingTable()
    {
        try
        {
            DefaultTableModel model = ( DefaultTableModel )jPriv_PrivateKeyringsTable.getModel();
            int rowCount = model.getRowCount();
            //Remove rows one by one from the end of the table
            for( int i = rowCount - 1; i >= 0; i-- )
            {
                model.removeRow( i );
            }

            Iterator<PGPSecretKeyRing> iter = PGPKeys.getSecretKeysCollection().getKeyRings();
            while( iter.hasNext() )
            {
                PGPSecretKeyRing keyRing = iter.next();

                Iterator<PGPSecretKey> keyIter = keyRing.getSecretKeys();
                PGPSecretKey key = keyIter.next();

                String nameAndEmail = ( String )key.getUserIDs().next();
                String[] parsed = nameAndEmail.split( " " );
                String email = parsed[ parsed.length - 1 ];
                String name = "";
                for( int i = 0; i < parsed.length - 1; i++ )
                {
                    name += parsed[ i ];
                    if( i < parsed.length - 2 )
                    {
                        name += " ";
                    }
                }

                model.addRow( new Object[]
                {
                    name, email, PGPKeys.keyIdToHexString( key.getKeyID() ), key.getKeyID()
                } );
            }
        }
        catch( IOException | PGPException ex )
        {
            Logger.getLogger( App.class.getName() ).log( Level.SEVERE, "Could not populate <private key ring table>", ex );
        }
    }

    private void resetReceiveTabComponents()
    {
        jRecv_FromTextbox.setText( "" );
        jRecv_ToTextbox.setText( "" );
        jRecv_BodyTextarea.setText( "" );
        jRecv_EncryptionTextbox.setText( "" );
        jRecv_PassphrasePasswordbox.setText( "" );
        jRecv_CompressionCheckbox.setSelected( false );
        jRecv_Radix64Checkbox.setSelected( false );
        jRecv_SignatureCheckbox.setSelected( false );
        jRecv_PassphrasePasswordbox.setEditable( false );

        jRecv_PassphrasePasswordbox.setEnabled( jRecv_SignatureCheckbox.isSelected() );
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> jPriv_DSABitsCombobox;
    private javax.swing.JLabel jPriv_DSABitsLabel;
    private javax.swing.JButton jPriv_DeleteButton;
    private javax.swing.JComboBox<String> jPriv_ElGamalBitsCombobox;
    private javax.swing.JLabel jPriv_ElGamalBitsLabel;
    private javax.swing.JLabel jPriv_EmailLabel;
    private javax.swing.JTextField jPriv_EmailTextbox;
    private javax.swing.JButton jPriv_ExportButton;
    private javax.swing.JButton jPriv_GenerateButton;
    private javax.swing.JButton jPriv_ImportButton;
    private javax.swing.JLabel jPriv_NameLabel;
    private javax.swing.JTextField jPriv_NameTextbox;
    private javax.swing.JLabel jPriv_PassphraseLabel;
    private javax.swing.JPasswordField jPriv_PassphrasePasswordbox;
    private javax.swing.JScrollPane jPriv_PrivateKeyringsScrollpane;
    private javax.swing.JTable jPriv_PrivateKeyringsTable;
    private javax.swing.JPanel jPriv_Tab;
    private javax.swing.JButton jPubl_DeleteButton;
    private javax.swing.JButton jPubl_ExportButton;
    private javax.swing.JButton jPubl_ImportButton;
    private javax.swing.JScrollPane jPubl_PublicKeyringsScrollpane;
    private javax.swing.JTable jPubl_PublicKeyringsTable;
    private javax.swing.JPanel jPubl_Tab;
    private javax.swing.JScrollPane jRecv_BodyScrollpane;
    private javax.swing.JTextArea jRecv_BodyTextarea;
    private javax.swing.JCheckBox jRecv_CompressionCheckbox;
    private javax.swing.JButton jRecv_DecryptButton;
    private javax.swing.JLabel jRecv_EncryptionLabel;
    private javax.swing.JTextField jRecv_EncryptionTextbox;
    private javax.swing.JLabel jRecv_FromLabel;
    private javax.swing.JTextField jRecv_FromTextbox;
    private javax.swing.JCheckBox jRecv_IntegrityVerifiedCheckbox;
    private javax.swing.JButton jRecv_OpenButton;
    private javax.swing.JLabel jRecv_PassphraseLabel;
    private javax.swing.JPasswordField jRecv_PassphrasePasswordbox;
    private javax.swing.JCheckBox jRecv_Radix64Checkbox;
    private javax.swing.JButton jRecv_SaveButton;
    private javax.swing.JCheckBox jRecv_SignatureCheckbox;
    private javax.swing.JCheckBox jRecv_SignatureVerifiedCheckbox;
    private javax.swing.JPanel jRecv_Tab;
    private javax.swing.JLabel jRecv_ToLabel;
    private javax.swing.JTextField jRecv_ToTextbox;
    private javax.swing.JButton jSend_AddRecipientButton;
    private javax.swing.JScrollPane jSend_BodyScrollpane;
    private javax.swing.JTextArea jSend_BodyTextarea;
    private javax.swing.JCheckBox jSend_CompressionCheckbox;
    private javax.swing.JComboBox<String> jSend_EncryptionCombobox;
    private javax.swing.JLabel jSend_EncryptionLabel;
    private javax.swing.JComboBox<String> jSend_FromCombobox;
    private javax.swing.JLabel jSend_FromLabel;
    private javax.swing.JLabel jSend_PassphraseLabel;
    private javax.swing.JPasswordField jSend_PassphrasePasswordbox;
    private javax.swing.JCheckBox jSend_Radix64Checkbox;
    private javax.swing.JButton jSend_SendButton;
    private javax.swing.JCheckBox jSend_SignatureCheckbox;
    private javax.swing.JPanel jSend_Tab;
    private javax.swing.JButton jSend_TestButton;
    private javax.swing.JComboBox<String> jSend_ToCombobox;
    private javax.swing.JLabel jSend_ToLabel;
    private javax.swing.JTextField jStatusbar;
    private javax.swing.JTabbedPane jTabs;
    // End of variables declaration//GEN-END:variables
}
