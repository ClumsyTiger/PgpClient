package etf.openpgp.iu170057d_sm170081d;

import java.io.File;
import java.util.Iterator;

import etf.openpgp.iu170057d_sm170081d.utils.FileUtils;
import etf.openpgp.iu170057d_sm170081d.encryption.Encryption;
import etf.openpgp.iu170057d_sm170081d.encryption.PGPKeys;
import java.io.IOException;
import java.math.BigInteger;
import java.nio.charset.StandardCharsets;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import org.bouncycastle.openpgp.PGPException;
import org.bouncycastle.openpgp.PGPKeyRingGenerator;
import org.bouncycastle.openpgp.PGPPublicKeyRing;
import org.bouncycastle.openpgp.PGPPublicKeyRingCollection;
import org.bouncycastle.openpgp.PGPSecretKeyRing;
import org.bouncycastle.openpgp.PGPSecretKeyRingCollection;
import org.bouncycastle.openpgp.PGPPublicKey;
import org.bouncycastle.openpgp.PGPSecretKey;

public class App extends javax.swing.JFrame
{

    /**
     * Creates new form App
     */
    public App()
    {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings( "unchecked" )
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jTabs = new javax.swing.JTabbedPane();
        jSend_Tab = new javax.swing.JPanel();
        jSend_FromLabel = new javax.swing.JLabel();
        jSend_ToLabel = new javax.swing.JLabel();
        jSend_FromComboBox = new javax.swing.JComboBox<>();
        jSend_ToComboBox = new javax.swing.JComboBox<>();
        jSend_BodyScrollpane = new javax.swing.JScrollPane();
        jSend_BodyTextarea = new javax.swing.JTextArea();
        jSend_SendButton = new javax.swing.JButton();
        jSend_EncryptionLabel = new javax.swing.JLabel();
        jSend_EncryptionCombobox = new javax.swing.JComboBox<>();
        jSend_PassphraseLabel = new javax.swing.JLabel();
        jSend_CompressionCheckbox = new javax.swing.JCheckBox();
        jSend_Radix64Checkbox = new javax.swing.JCheckBox();
        jSend_TestButton = new javax.swing.JButton();
        jSend_PassphrasePasswordbox = new javax.swing.JPasswordField();
        jSignature_Checkbox = new javax.swing.JCheckBox();
        jRecv_Tab = new javax.swing.JPanel();
        jRecv_FromLabel = new javax.swing.JLabel();
        jRecv_BodyScrollpane = new javax.swing.JScrollPane();
        jRecv_BodyTextarea = new javax.swing.JTextArea();
        jRecv_OpenButton = new javax.swing.JButton();
        jRecv_PassphraseLabel = new javax.swing.JLabel();
        jRecv_SaveButton = new javax.swing.JButton();
        jRecv_FromTextbox = new javax.swing.JTextField();
        jRecv_PassphrasePasswordbox = new javax.swing.JPasswordField();
        jPubl_Tab = new javax.swing.JPanel();
        jPubl_PublicKeyringsScrollpane = new javax.swing.JScrollPane();
        jPubl_PublicKeyringsTable = new javax.swing.JTable();
        jPubl_DeleteButton = new javax.swing.JButton();
        jPubl_ImportButton = new javax.swing.JButton();
        jPubl_ExportButton = new javax.swing.JButton();
        jPriv_Tab = new javax.swing.JPanel();
        jPriv_PrivateKeyringsScrollpane = new javax.swing.JScrollPane();
        jPriv_PrivateKeyringsTable = new javax.swing.JTable();
        jPriv_GenerateButton = new javax.swing.JButton();
        jPriv_ImportButton = new javax.swing.JButton();
        jPriv_ExportButton = new javax.swing.JButton();
        jPriv_NameTextbox = new javax.swing.JTextField();
        jPriv_NameLabel = new javax.swing.JLabel();
        jPriv_PassphraseTextbox = new javax.swing.JTextField();
        jPriv_PassphraseLabel = new javax.swing.JLabel();
        jPriv_EmailTextbox = new javax.swing.JTextField();
        jPriv_EmailLabel = new javax.swing.JLabel();
        jPriv_DeleteButton = new javax.swing.JButton();
        jPriv_DSABitsCombobox = new javax.swing.JComboBox<>();
        jPriv_DSABitsLabel = new javax.swing.JLabel();
        jPriv_ElGamalBitsLabel = new javax.swing.JLabel();
        jPriv_ElGamalBitsCombobox = new javax.swing.JComboBox<>();
        jStatusbar = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Pretty Good Privacy Client");
        setSize(new java.awt.Dimension(640, 480));

        jTabs.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        jTabs.setDoubleBuffered(true);
        jTabs.setPreferredSize(new java.awt.Dimension(640, 480));

        jSend_Tab.setBorder(javax.swing.BorderFactory.createEmptyBorder(25, 30, 25, 30));

        jSend_FromLabel.setText("From");

        jSend_ToLabel.setText("To");

        jSend_FromComboBox.setMaximumRowCount(16);

        jSend_ToComboBox.setMaximumRowCount(16);

        jSend_BodyTextarea.setColumns(20);
        jSend_BodyTextarea.setLineWrap(true);
        jSend_BodyTextarea.setTabSize(4);
        jSend_BodyTextarea.setName(""); // NOI18N
        jSend_BodyScrollpane.setViewportView(jSend_BodyTextarea);

        jSend_SendButton.setText("Send");
        jSend_SendButton.setPreferredSize(new java.awt.Dimension(58, 32));
        jSend_SendButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jSend_SendButtonActionPerformed(evt);
            }
        });

        jSend_EncryptionLabel.setText("Encryption");

        jSend_EncryptionCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ElGamal + IDEA", "ElGamal + 3DES", "none" }));

        jSend_PassphraseLabel.setText("Passphrase");

        jSend_CompressionCheckbox.setSelected(true);
        jSend_CompressionCheckbox.setText("Compression ");
        jSend_CompressionCheckbox.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        jSend_Radix64Checkbox.setSelected(true);
        jSend_Radix64Checkbox.setText("Radix64 Encoding");
        jSend_Radix64Checkbox.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        jSend_TestButton.setText("Test");
        jSend_TestButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jSend_TestButtonActionPerformed(evt);
            }
        });

        jSignature_Checkbox.setSelected(true);
        jSignature_Checkbox.setText("Signature");
        jSignature_Checkbox.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        javax.swing.GroupLayout jSend_TabLayout = new javax.swing.GroupLayout(jSend_Tab);
        jSend_Tab.setLayout(jSend_TabLayout);
        jSend_TabLayout.setHorizontalGroup(
            jSend_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jSend_TabLayout.createSequentialGroup()
                .addComponent(jSend_CompressionCheckbox)
                .addGap(18, 18, 18)
                .addComponent(jSend_Radix64Checkbox)
                .addGap(18, 18, 18)
                .addComponent(jSignature_Checkbox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jSend_BodyScrollpane)
            .addGroup(jSend_TabLayout.createSequentialGroup()
                .addGroup(jSend_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jSend_FromLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSend_ToLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jSend_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSend_FromComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSend_ToComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSend_SendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jSend_TabLayout.createSequentialGroup()
                .addComponent(jSend_EncryptionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSend_EncryptionCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(jSend_PassphraseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSend_PassphrasePasswordbox, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSend_TestButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jSend_TabLayout.setVerticalGroup(
            jSend_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jSend_TabLayout.createSequentialGroup()
                .addGroup(jSend_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jSend_TabLayout.createSequentialGroup()
                        .addGroup(jSend_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSend_FromLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSend_FromComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jSend_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jSend_ToComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSend_ToLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jSend_SendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSend_BodyScrollpane, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jSend_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSend_TestButton)
                    .addComponent(jSend_PassphraseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSend_PassphrasePasswordbox, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSend_EncryptionCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSend_EncryptionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jSend_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSend_CompressionCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSend_Radix64Checkbox, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSignature_Checkbox, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jTabs.addTab("Send email", jSend_Tab);

        jRecv_Tab.setBorder(javax.swing.BorderFactory.createEmptyBorder(25, 30, 25, 30));

        jRecv_FromLabel.setText("From");

        jRecv_BodyTextarea.setEditable(false);
        jRecv_BodyTextarea.setColumns(20);
        jRecv_BodyTextarea.setTabSize(4);
        jRecv_BodyScrollpane.setViewportView(jRecv_BodyTextarea);

        jRecv_OpenButton.setText("Open");
        jRecv_OpenButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jRecv_OpenButtonActionPerformed(evt);
            }
        });

        jRecv_PassphraseLabel.setText("Passphrase");

        jRecv_SaveButton.setText("Save");
        jRecv_SaveButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jRecv_SaveButtonActionPerformed(evt);
            }
        });

        jRecv_FromTextbox.setEditable(false);

        javax.swing.GroupLayout jRecv_TabLayout = new javax.swing.GroupLayout(jRecv_Tab);
        jRecv_Tab.setLayout(jRecv_TabLayout);
        jRecv_TabLayout.setHorizontalGroup(
            jRecv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jRecv_TabLayout.createSequentialGroup()
                .addGroup(jRecv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRecv_PassphraseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRecv_FromLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jRecv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRecv_FromTextbox)
                    .addComponent(jRecv_PassphrasePasswordbox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jRecv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRecv_OpenButton, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRecv_SaveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addComponent(jRecv_BodyScrollpane, javax.swing.GroupLayout.DEFAULT_SIZE, 678, Short.MAX_VALUE)
        );
        jRecv_TabLayout.setVerticalGroup(
            jRecv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jRecv_TabLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jRecv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRecv_FromTextbox, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRecv_OpenButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRecv_FromLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jRecv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRecv_PassphraseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRecv_PassphrasePasswordbox, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRecv_SaveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addComponent(jRecv_BodyScrollpane, javax.swing.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE))
        );

        jTabs.addTab("Receive email", jRecv_Tab);

        jPubl_Tab.setBorder(javax.swing.BorderFactory.createEmptyBorder(25, 30, 25, 30));

        jPubl_PublicKeyringsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "Email", "Key Id", "PublicKeyValue"
            }
        )
        {
            boolean[] canEdit = new boolean []
            {
                true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        jPubl_PublicKeyringsScrollpane.setViewportView(jPubl_PublicKeyringsTable);
        if (jPubl_PublicKeyringsTable.getColumnModel().getColumnCount() > 0)
        {
            jPubl_PublicKeyringsTable.getColumnModel().getColumn(2).setMinWidth(0);
            jPubl_PublicKeyringsTable.getColumnModel().getColumn(2).setPreferredWidth(0);
            jPubl_PublicKeyringsTable.getColumnModel().getColumn(2).setMaxWidth(0);
        }

        jPubl_DeleteButton.setText("Delete");
        jPubl_DeleteButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jPubl_DeleteButtonActionPerformed(evt);
            }
        });

        jPubl_ImportButton.setText("Import");
        jPubl_ImportButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jPubl_ImportButtonActionPerformed(evt);
            }
        });

        jPubl_ExportButton.setText("Export");
        jPubl_ExportButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jPubl_ExportButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPubl_TabLayout = new javax.swing.GroupLayout(jPubl_Tab);
        jPubl_Tab.setLayout(jPubl_TabLayout);
        jPubl_TabLayout.setHorizontalGroup(
            jPubl_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPubl_TabLayout.createSequentialGroup()
                .addComponent(jPubl_DeleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(jPubl_ImportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPubl_ExportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPubl_PublicKeyringsScrollpane)
        );
        jPubl_TabLayout.setVerticalGroup(
            jPubl_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPubl_TabLayout.createSequentialGroup()
                .addComponent(jPubl_PublicKeyringsScrollpane, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE)
                .addGap(36, 36, 36)
                .addGroup(jPubl_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jPubl_DeleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPubl_ImportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPubl_ExportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jTabs.addTab("Public Keys", jPubl_Tab);

        jPriv_Tab.setBorder(javax.swing.BorderFactory.createEmptyBorder(25, 30, 25, 30));

        jPriv_PrivateKeyringsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "Name", "Email", "Key Id", "PrivateKeyId"
            }
        )
        {
            boolean[] canEdit = new boolean []
            {
                true, true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        jPriv_PrivateKeyringsScrollpane.setViewportView(jPriv_PrivateKeyringsTable);
        if (jPriv_PrivateKeyringsTable.getColumnModel().getColumnCount() > 0)
        {
            jPriv_PrivateKeyringsTable.getColumnModel().getColumn(3).setMinWidth(0);
            jPriv_PrivateKeyringsTable.getColumnModel().getColumn(3).setPreferredWidth(0);
            jPriv_PrivateKeyringsTable.getColumnModel().getColumn(3).setMaxWidth(0);
        }

        jPriv_GenerateButton.setText("Generate");
        jPriv_GenerateButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jPriv_GenerateButtonActionPerformed(evt);
            }
        });

        jPriv_ImportButton.setText("Import");
        jPriv_ImportButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jPriv_ImportButtonActionPerformed(evt);
            }
        });

        jPriv_ExportButton.setText("Export");
        jPriv_ExportButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jPriv_ExportButtonActionPerformed(evt);
            }
        });

        jPriv_NameLabel.setText("Name");

        jPriv_PassphraseLabel.setText("Passphrase");

        jPriv_EmailLabel.setText("Email");

        jPriv_DeleteButton.setText("Delete");
        jPriv_DeleteButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jPriv_DeleteButtonActionPerformed(evt);
            }
        });

        jPriv_DSABitsCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1024", "2048" }));

        jPriv_DSABitsLabel.setText("DSA bits");

        jPriv_ElGamalBitsLabel.setText("ElGamal bits");

        jPriv_ElGamalBitsCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1024", "2048", "4096" }));

        javax.swing.GroupLayout jPriv_TabLayout = new javax.swing.GroupLayout(jPriv_Tab);
        jPriv_Tab.setLayout(jPriv_TabLayout);
        jPriv_TabLayout.setHorizontalGroup(
            jPriv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPriv_TabLayout.createSequentialGroup()
                .addComponent(jPriv_DeleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(jPriv_ImportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPriv_ExportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(jPriv_GenerateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPriv_TabLayout.createSequentialGroup()
                .addGroup(jPriv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPriv_NameLabel)
                    .addComponent(jPriv_NameTextbox, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPriv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPriv_EmailTextbox, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                    .addComponent(jPriv_EmailLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPriv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPriv_PassphraseLabel)
                    .addComponent(jPriv_PassphraseTextbox, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPriv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPriv_DSABitsLabel)
                    .addComponent(jPriv_DSABitsCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPriv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPriv_ElGamalBitsLabel)
                    .addComponent(jPriv_ElGamalBitsCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addComponent(jPriv_PrivateKeyringsScrollpane)
        );
        jPriv_TabLayout.setVerticalGroup(
            jPriv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPriv_TabLayout.createSequentialGroup()
                .addComponent(jPriv_PrivateKeyringsScrollpane, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPriv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPriv_TabLayout.createSequentialGroup()
                        .addGroup(jPriv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPriv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jPriv_EmailLabel)
                                .addComponent(jPriv_NameLabel))
                            .addComponent(jPriv_PassphraseLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPriv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jPriv_PassphraseTextbox, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPriv_NameTextbox, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPriv_EmailTextbox, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPriv_TabLayout.createSequentialGroup()
                        .addComponent(jPriv_ElGamalBitsLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPriv_ElGamalBitsCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPriv_TabLayout.createSequentialGroup()
                        .addComponent(jPriv_DSABitsLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPriv_DSABitsCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(36, 36, 36)
                .addGroup(jPriv_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jPriv_ImportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPriv_ExportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPriv_DeleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPriv_GenerateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jTabs.addTab("Private Keys", jPriv_Tab);

        jStatusbar.setEditable(false);
        jStatusbar.setText("Success");
        jStatusbar.setFocusable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jStatusbar)
            .addComponent(jTabs, javax.swing.GroupLayout.DEFAULT_SIZE, 740, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabs, javax.swing.GroupLayout.DEFAULT_SIZE, 494, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(jStatusbar, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jTabs.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void jSend_SendButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jSend_SendButtonActionPerformed
    {//GEN-HEADEREND:event_jSend_SendButtonActionPerformed
        // Read original message
        String textMessage = jSend_BodyTextarea.getText();
        byte[] byteMessage = textMessage.getBytes();

        // Read encryption metadata
        boolean addSignature = jSignature_Checkbox.isSelected();
        boolean addCompression = jSend_CompressionCheckbox.isSelected();
        boolean addConversionToRadix64 = jSend_Radix64Checkbox.isSelected();

        // Read sender secret key
        PGPSecretKey senderSecretKey = null;
        int senderKeyComboBoxIndex = jSend_FromComboBox.getSelectedIndex();
        String senderNameAndKeyID = jSend_FromComboBox.getItemAt( senderKeyComboBoxIndex );
        String[] splittedSenderNameAndKey = senderNameAndKeyID.split( " | " );
        long senderKeyID = new BigInteger( splittedSenderNameAndKey[ splittedSenderNameAndKey.length - 1 ], 16 ).longValue();
        try
        {
            PGPSecretKeyRing senderKeyRing = PGPKeys.findSecretKeyRing(senderKeyID);
            Iterator<PGPSecretKey> keyIter = senderKeyRing.getSecretKeys();
            senderSecretKey = keyIter.next();
        }
        catch( IOException | PGPException ex )
        {
            Logger.getLogger( App.class.getName() ).log( Level.SEVERE, null, ex );
            // TODO(Uros): possibly return here
        }

        // Read receiver public key
        PGPPublicKey receiverPublicKey = null;
        int receiverKeyComboBoxIndex = jSend_ToComboBox.getSelectedIndex();
        // TODO(Uros): should we do something with this?
        String receiverNameAndKeyID = jSend_ToComboBox.getItemAt( receiverKeyComboBoxIndex );
        String[] splittedReceiverNameAndKey = receiverNameAndKeyID.split( " | " );
        long receiverKeyID = new BigInteger( splittedReceiverNameAndKey[ splittedReceiverNameAndKey.length - 1 ], 16 ).longValue();
        try
        {
            PGPPublicKeyRing receiverKeyRing = PGPKeys.findPublicKeyRing( receiverKeyID );
            Iterator<PGPPublicKey> keyIter = receiverKeyRing.getPublicKeys();
            receiverPublicKey = keyIter.next();
        }
        catch( IOException | PGPException ex )
        {
            Logger.getLogger( App.class.getName() ).log( Level.SEVERE, null, ex );
            // TODO(Uros): possibly return here
        }

        // Read encryption algorithm
        Encryption.SymmetricEncryptionAlgorithm encryptionAlgorithm = null;
        int encryptionAlgorithmIndex = jSend_EncryptionCombobox.getSelectedIndex();
        switch( encryptionAlgorithmIndex )
        {
        case 0:
        {
            encryptionAlgorithm = Encryption.SymmetricEncryptionAlgorithm.ELGAMAL_IDEA;
            break;
        }
        case 1:
        {
            encryptionAlgorithm = Encryption.SymmetricEncryptionAlgorithm.ELGAMAL_3DES;
            break;
        }
        case 2:
        {
            encryptionAlgorithm = Encryption.SymmetricEncryptionAlgorithm.NONE;
            break;
        }
        default:
            break;
        }

        // Read passphrase
        char[] senderPassphrase = jSend_PassphrasePasswordbox.getPassword();

        // Encryption
        byte[] encryptedMessage = Encryption.encrypt(
                byteMessage,
                senderSecretKey,
                receiverPublicKey,
                encryptionAlgorithm,
                senderPassphrase,
                addSignature,
                addCompression,
                addConversionToRadix64 );

        String encryptedFilePath = FileUtils.getUserSelectedFilePath( FileUtils.SAVE_DIALOG );
        if( encryptedFilePath == null )
        {
            jStatusbar.setText( "File with given path missing." );
            return;
        }

        FileUtils.writeToFile( encryptedFilePath, encryptedMessage );
        jStatusbar.setText( "Sent message." );
    }//GEN-LAST:event_jSend_SendButtonActionPerformed

    private void jSend_TestButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jSend_TestButtonActionPerformed
    {//GEN-HEADEREND:event_jSend_TestButtonActionPerformed
        // TODO(Uros): Do we need this?
    }//GEN-LAST:event_jSend_TestButtonActionPerformed


    private void jRecv_OpenButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jRecv_OpenButtonActionPerformed
    {//GEN-HEADEREND:event_jRecv_OpenButtonActionPerformed
        String encryptedFilePath = FileUtils.getUserSelectedFilePath( FileUtils.OPEN_DIALOG );
        if( encryptedFilePath == null )
        {
            jStatusbar.setText( "File with given path missing." );
            return;
        }

        // Read encrypted message
        byte[] encryptedMessage = FileUtils.readFromFile( encryptedFilePath );

        // Read passphrase to be used if necessery
        char[] receiverPassphrase = jRecv_PassphrasePasswordbox.getPassword();

        // TODO: only encrypted files need to be decrypted here
        // Decryption
        Encryption.DecryptedMessage decryptedMessage = Encryption.decrypt(
                encryptedMessage,
                receiverPassphrase );
        String dectryptedMessageString = new String( decryptedMessage.decryptedMessage );

        // Write output
        jRecv_BodyTextarea.setText( dectryptedMessageString );
        jStatusbar.setText( "Opened message." );
    }//GEN-LAST:event_jRecv_OpenButtonActionPerformed

    private void jRecv_SaveButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jRecv_SaveButtonActionPerformed
    {//GEN-HEADEREND:event_jRecv_SaveButtonActionPerformed
        String encryptedFilePath = FileUtils.getUserSelectedFilePath( FileUtils.SAVE_DIALOG );
        if( encryptedFilePath == null )
        {
            jStatusbar.setText( "File with given path missing." );
            return;
        }

        // TODO(Uros): Implement
    }//GEN-LAST:event_jRecv_SaveButtonActionPerformed


    private void jPubl_DeleteButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jPubl_DeleteButtonActionPerformed
    {//GEN-HEADEREND:event_jPubl_DeleteButtonActionPerformed
        int rowIdx = jPubl_PublicKeyringsTable.getSelectedRow();

        if( rowIdx < 0 )
        {
            jStatusbar.setText( "A key must be selected in order to perform delete operation!." );
            return;
        }

        long keyID = ( long )jPubl_PublicKeyringsTable.getValueAt( rowIdx, 2 );
        try
        {
            PGPPublicKeyRing keyRingToBeDeleted = PGPKeys.findPublicKeyRing( keyID );
            PGPKeys.removePublicKey( keyRingToBeDeleted );
            PGPKeys.savePublicKeysToFile();
            populatePublicKeyRingTable();
            jStatusbar.setText( "Deleted public key successfully." );
        }
        catch( IOException | PGPException ex )
        {
            Logger.getLogger( App.class.getName() ).log( Level.SEVERE, null, ex );
            jStatusbar.setText( "Could not delete public key." );
        }
    }//GEN-LAST:event_jPubl_DeleteButtonActionPerformed

    private void jPubl_ImportButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jPubl_ImportButtonActionPerformed
    {//GEN-HEADEREND:event_jPubl_ImportButtonActionPerformed
        String importPublicKeyFilePath = FileUtils.getUserSelectedFilePath( FileUtils.OPEN_DIALOG );
        if( importPublicKeyFilePath == null )
        {
            jStatusbar.setText( "File with given path missing." );
            return;
        }

        try
        {
            PGPKeys.importPublicKey( new File( importPublicKeyFilePath ) );
            populatePublicKeyRingTable();
            jStatusbar.setText( "Imported public key successfully." );
        }
        catch( IOException | PGPException ex )
        {
            Logger.getLogger( App.class.getName() ).log( Level.SEVERE, null, ex );
            jStatusbar.setText( "Could not import public key." );
        }
    }//GEN-LAST:event_jPubl_ImportButtonActionPerformed

    private void jPubl_ExportButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jPubl_ExportButtonActionPerformed
    {//GEN-HEADEREND:event_jPubl_ExportButtonActionPerformed
        String exportPublicKeyFilePath = FileUtils.getUserSelectedFilePath( FileUtils.SAVE_DIALOG );
        if( exportPublicKeyFilePath == null )
        {
            jStatusbar.setText( "File with given path missing." );
            return;
        }

        int rowIdx = jPubl_PublicKeyringsTable.getSelectedRow();

        if( rowIdx < 0 )
        {
            jStatusbar.setText( "A public key must be selected in order to perform the export operation!." );
            return;
        }

        long keyID = ( long )jPubl_PublicKeyringsTable.getValueAt( rowIdx, 2 );
        try
        {
            PGPPublicKeyRing keyRingToBeExported = PGPKeys.findPublicKeyRing( keyID );
            PGPKeys.exportPublicKey( keyRingToBeExported, new File( exportPublicKeyFilePath ) );
            jStatusbar.setText( "Exported public key successfully." );
        }
        catch( IOException | PGPException ex )
        {
            Logger.getLogger( App.class.getName() ).log( Level.SEVERE, null, ex );
            jStatusbar.setText( "Could not export public key." );
        }
    }//GEN-LAST:event_jPubl_ExportButtonActionPerformed


    private void jPriv_DeleteButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jPriv_DeleteButtonActionPerformed
    {//GEN-HEADEREND:event_jPriv_DeleteButtonActionPerformed
        int rowIdx = jPriv_PrivateKeyringsTable.getSelectedRow();

        if( rowIdx < 0 )
        {
            jStatusbar.setText( "A key must be selected in order to perform delete operation!." );
            return;
        }

        long keyID = ( long )jPriv_PrivateKeyringsTable.getValueAt( rowIdx, 3 );
        try
        {
            PGPSecretKeyRing keyRingToBeDeleted = PGPKeys.findSecretKeyRing( keyID );
            PGPKeys.removeSecretKey( keyRingToBeDeleted );
            PGPKeys.saveSecretKeysToFile();
            populatePrivateKeyRingTable();
            jStatusbar.setText( "Deleted private key successfully." );
        }
        catch( IOException | PGPException ex )
        {
            Logger.getLogger( App.class.getName() ).log( Level.SEVERE, null, ex );
            jStatusbar.setText( "Could not delete private key." );
        }
    }//GEN-LAST:event_jPriv_DeleteButtonActionPerformed

    private void jPriv_ImportButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jPriv_ImportButtonActionPerformed
    {//GEN-HEADEREND:event_jPriv_ImportButtonActionPerformed
        String importSecretKeyFilePath = FileUtils.getUserSelectedFilePath( FileUtils.OPEN_DIALOG );
        if( importSecretKeyFilePath == null )
        {
            jStatusbar.setText( "File with given path missing." );
            return;
        }

        try
        {
            PGPKeys.importSecretKey( new File( importSecretKeyFilePath ) );
            populatePrivateKeyRingTable();
            jStatusbar.setText( "Imported private key successfully." );
        }
        catch( IOException | PGPException ex )
        {
            Logger.getLogger( App.class.getName() ).log( Level.SEVERE, null, ex );
            jStatusbar.setText( "Could not import private key." );
        }
    }//GEN-LAST:event_jPriv_ImportButtonActionPerformed

    private void jPriv_ExportButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jPriv_ExportButtonActionPerformed
    {//GEN-HEADEREND:event_jPriv_ExportButtonActionPerformed
        String exportSecretKeyFilePath = FileUtils.getUserSelectedFilePath( FileUtils.SAVE_DIALOG );
        if( exportSecretKeyFilePath == null )
        {
            jStatusbar.setText( "File with given path missing." );
            return;
        }

        int rowIdx = jPriv_PrivateKeyringsTable.getSelectedRow();

        if( rowIdx < 0 )
        {
            jStatusbar.setText( "A key must be selected in order to perform export operation!." );
            return;
        }

        long keyID = ( long )jPriv_PrivateKeyringsTable.getValueAt( rowIdx, 3 );
        try
        {
            PGPSecretKeyRing keyRingToBeExported = PGPKeys.findSecretKeyRing( keyID );
            PGPKeys.exportSecretKey( keyRingToBeExported, new File( exportSecretKeyFilePath ) );
            jStatusbar.setText( "Exported private key successfully." );
        }
        catch( IOException | PGPException ex )
        {
            Logger.getLogger( App.class.getName() ).log( Level.SEVERE, null, ex );
            jStatusbar.setText( "Could not export private key." );
        }
    }//GEN-LAST:event_jPriv_ExportButtonActionPerformed

    private void jPriv_GenerateButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jPriv_GenerateButtonActionPerformed
    {//GEN-HEADEREND:event_jPriv_GenerateButtonActionPerformed
        int selectedDSABitsIndex = jPriv_DSABitsCombobox.getSelectedIndex();
        int selectedDSABits = Integer.parseInt( jPriv_DSABitsCombobox.getItemAt( selectedDSABitsIndex ) );

        int selectedElGamalBitsIndex = jPriv_ElGamalBitsCombobox.getSelectedIndex();
        int selectedElGamalBits = Integer.parseInt( jPriv_ElGamalBitsCombobox.getItemAt( selectedElGamalBitsIndex ) );

        String name = jPriv_NameTextbox.getText();
        String email = jPriv_EmailTextbox.getText();
        String passphrase = jPriv_PassphraseTextbox.getText();

        if( "".equals( name ) || "".equals( email ) || "".equals( passphrase ) )
        {
            jStatusbar.setText( "Invalid private key generation data." );
            return;
        }

        String userID = name + " <" + email + ">";

        try
        {
            PGPKeyRingGenerator pgpKeyRingGenerator = PGPKeys.createPGPKeyRingGenerator(
                    PGPKeys.generateDsaKeyPair( selectedDSABits ),
                    PGPKeys.generateElGamalKeyPair( selectedElGamalBits ),
                    userID,
                    passphrase.toCharArray() );

            PGPKeys.addPublicKey( pgpKeyRingGenerator );
            PGPKeys.addSecretKey( pgpKeyRingGenerator );
            PGPKeys.savePublicKeysToFile();
            PGPKeys.saveSecretKeysToFile();
            populatePrivateKeyRingTable();
            populatePublicKeyRingTable();
            jStatusbar.setText( "Private key generated successfully." );
        }
        catch( Exception ex )
        {
            Logger.getLogger( App.class.getName() ).log( Level.SEVERE, null, ex );
            jStatusbar.setText( "Could not generate private key." );
        }
    }//GEN-LAST:event_jPriv_GenerateButtonActionPerformed

    void populateSendMessageFromComboBox()
    {
        jSend_FromComboBox.removeAllItems();

        try
        {
            Iterator<PGPSecretKeyRing> iter = PGPKeys.getSecretKeysCollection().getKeyRings();
            while( iter.hasNext() )
            {
                PGPSecretKeyRing keyRing = iter.next();

                Iterator<PGPSecretKey> keyIter = keyRing.getSecretKeys();
                PGPSecretKey key = keyIter.next();

                String nameAndEmail = ( String )key.getUserIDs().next();
                String[] parsed = nameAndEmail.split( " " );
                String email = parsed[ parsed.length - 1 ];
                String name = "";
                for( int i = 0; i < parsed.length - 1; i++ )
                {
                    name += parsed[ i ];
                    if( i < parsed.length - 2 )
                    {
                        name += " ";
                    }
                }

                jSend_FromComboBox.addItem( name + " " + email + " | " + Integer.toHexString( ( int )key.getKeyID() ) );
            }
        }
        catch( IOException | PGPException ex )
        {
            Logger.getLogger( App.class.getName() ).log( Level.SEVERE, null, ex );
        }
    }

    void populateSendMessageToComboBox()
    {
        jSend_ToComboBox.removeAllItems();

        try
        {
            Iterator<PGPPublicKeyRing> iter = PGPKeys.getPublicKeysCollection().getKeyRings();
            while( iter.hasNext() )
            {
                PGPPublicKeyRing keyRing = iter.next();

                Iterator<PGPPublicKey> keyIter = keyRing.getPublicKeys();
                PGPPublicKey key = keyIter.next();

                jSend_ToComboBox.addItem(
                        new String( ( byte[] )key.getRawUserIDs().next(), StandardCharsets.UTF_8 )
                        + " | " + Integer.toHexString( ( int )key.getKeyID() ) );
            }
        }
        catch( IOException | PGPException ex )
        {
            Logger.getLogger( App.class.getName() ).log( Level.SEVERE, null, ex );
        }
    }

    void populatePublicKeyRingTable()
    {
        try
        {
            PGPPublicKeyRingCollection publicKeyRing = PGPKeys.getPublicKeysCollection();
            DefaultTableModel model = ( DefaultTableModel )jPubl_PublicKeyringsTable.getModel();
            int rowCount = model.getRowCount();
            //Remove rows one by one from the end of the table
            for( int i = rowCount - 1; i >= 0; i-- )
            {
                model.removeRow( i );
            }

            Iterator<PGPPublicKeyRing> iter = PGPKeys.getPublicKeysCollection().getKeyRings();
            while( iter.hasNext() )
            {
                PGPPublicKeyRing keyRing = iter.next();

                Iterator<PGPPublicKey> keyIter = keyRing.getPublicKeys();
                PGPPublicKey key = keyIter.next();

                model.addRow( new Object[]
                {
                    new String( ( byte[] )key.getRawUserIDs().next(), StandardCharsets.UTF_8 ), Integer.toHexString( ( int )key.getKeyID() ), key.getKeyID()
                } );
            }
        }
        catch( IOException | PGPException ex )
        {
            Logger.getLogger( App.class.getName() ).log( Level.SEVERE, null, ex );
        }
    }

    void populatePrivateKeyRingTable()
    {
        try
        {
            PGPSecretKeyRingCollection secretKeyRing = PGPKeys.getSecretKeysCollection();

            DefaultTableModel model = ( DefaultTableModel )jPriv_PrivateKeyringsTable.getModel();
            int rowCount = model.getRowCount();
            //Remove rows one by one from the end of the table
            for( int i = rowCount - 1; i >= 0; i-- )
            {
                model.removeRow( i );
            }

            Iterator<PGPSecretKeyRing> iter = PGPKeys.getSecretKeysCollection().getKeyRings();
            while( iter.hasNext() )
            {
                PGPSecretKeyRing keyRing = iter.next();

                Iterator<PGPSecretKey> keyIter = keyRing.getSecretKeys();
                PGPSecretKey key = keyIter.next();

                String nameAndEmail = ( String )key.getUserIDs().next();
                String[] parsed = nameAndEmail.split( " " );
                String email = parsed[ parsed.length - 1 ];
                String name = "";
                for( int i = 0; i < parsed.length - 1; i++ )
                {
                    name += parsed[ i ];
                    if( i < parsed.length - 2 )
                    {
                        name += " ";
                    }
                }

                model.addRow( new Object[]
                {
                    name, email, Integer.toHexString( ( int )key.getKeyID() ), key.getKeyID()
                } );
            }
        }
        catch( IOException | PGPException ex )
        {
            Logger.getLogger( App.class.getName() ).log( Level.SEVERE, null, ex );
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> jPriv_DSABitsCombobox;
    private javax.swing.JLabel jPriv_DSABitsLabel;
    private javax.swing.JButton jPriv_DeleteButton;
    private javax.swing.JComboBox<String> jPriv_ElGamalBitsCombobox;
    private javax.swing.JLabel jPriv_ElGamalBitsLabel;
    private javax.swing.JLabel jPriv_EmailLabel;
    private javax.swing.JTextField jPriv_EmailTextbox;
    private javax.swing.JButton jPriv_ExportButton;
    private javax.swing.JButton jPriv_GenerateButton;
    private javax.swing.JButton jPriv_ImportButton;
    private javax.swing.JLabel jPriv_NameLabel;
    private javax.swing.JTextField jPriv_NameTextbox;
    private javax.swing.JLabel jPriv_PassphraseLabel;
    private javax.swing.JTextField jPriv_PassphraseTextbox;
    private javax.swing.JScrollPane jPriv_PrivateKeyringsScrollpane;
    private javax.swing.JTable jPriv_PrivateKeyringsTable;
    private javax.swing.JPanel jPriv_Tab;
    private javax.swing.JButton jPubl_DeleteButton;
    private javax.swing.JButton jPubl_ExportButton;
    private javax.swing.JButton jPubl_ImportButton;
    private javax.swing.JScrollPane jPubl_PublicKeyringsScrollpane;
    private javax.swing.JTable jPubl_PublicKeyringsTable;
    private javax.swing.JPanel jPubl_Tab;
    private javax.swing.JScrollPane jRecv_BodyScrollpane;
    private javax.swing.JTextArea jRecv_BodyTextarea;
    private javax.swing.JLabel jRecv_FromLabel;
    private javax.swing.JTextField jRecv_FromTextbox;
    private javax.swing.JButton jRecv_OpenButton;
    private javax.swing.JLabel jRecv_PassphraseLabel;
    private javax.swing.JPasswordField jRecv_PassphrasePasswordbox;
    private javax.swing.JButton jRecv_SaveButton;
    private javax.swing.JPanel jRecv_Tab;
    private javax.swing.JScrollPane jSend_BodyScrollpane;
    private javax.swing.JTextArea jSend_BodyTextarea;
    private javax.swing.JCheckBox jSend_CompressionCheckbox;
    private javax.swing.JComboBox<String> jSend_EncryptionCombobox;
    private javax.swing.JLabel jSend_EncryptionLabel;
    private javax.swing.JComboBox<String> jSend_FromComboBox;
    private javax.swing.JLabel jSend_FromLabel;
    private javax.swing.JLabel jSend_PassphraseLabel;
    private javax.swing.JPasswordField jSend_PassphrasePasswordbox;
    private javax.swing.JCheckBox jSend_Radix64Checkbox;
    private javax.swing.JButton jSend_SendButton;
    private javax.swing.JPanel jSend_Tab;
    private javax.swing.JButton jSend_TestButton;
    private javax.swing.JComboBox<String> jSend_ToComboBox;
    private javax.swing.JLabel jSend_ToLabel;
    private javax.swing.JCheckBox jSignature_Checkbox;
    private javax.swing.JTextField jStatusbar;
    private javax.swing.JTabbedPane jTabs;
    // End of variables declaration//GEN-END:variables
}
